{"ast":null,"code":"'use strict';\n\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"D:\\\\react project\\\\homiApp\\\\homi\\\\node_modules\\\\react-native-radio-buttons\\\\lib\\\\segmented-controls.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport ReactNative from \"react-native-web/dist/index\";\nimport RadioButtons from \"./\";\nvar Text = ReactNative.Text,\n    TouchableWithoutFeedback = ReactNative.TouchableWithoutFeedback,\n    View = ReactNative.View,\n    Platform = ReactNative.Platform;\n\nvar SegmentedControls = function (_React$Component) {\n  _inherits(SegmentedControls, _React$Component);\n\n  function SegmentedControls() {\n    _classCallCheck(this, SegmentedControls);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(SegmentedControls).apply(this, arguments));\n  }\n\n  _createClass(SegmentedControls, [{\n    key: \"render\",\n    value: function render() {\n      var config = this.getConfig();\n      return React.createElement(RadioButtons, _extends({}, this.props, {\n        renderOption: this.renderOption.bind(this, config),\n        renderContainer: this.renderContainer.bind(this, config),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19\n        }\n      }));\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      var tint = this.props.tint || DEFAULTS.tint;\n      var backTint = this.props.backTint || DEFAULTS.backTint;\n      var colors = {\n        tint: tint,\n        selectedTint: backTint,\n        backgroundColor: backTint,\n        selectedBackgroundColor: tint,\n        containerBorderTint: tint,\n        separatorTint: tint\n      };\n      return _objectSpread({}, DEFAULTS, {}, colors, {}, this.props);\n    }\n  }, {\n    key: \"renderContainer\",\n    value: function renderContainer(config, options) {\n      var baseContainerStyle = {\n        flexDirection: config.direction,\n        backgroundColor: config.backgroundColor,\n        borderColor: config.containerBorderTint,\n        borderWidth: config.containerBorderWidth,\n        overflow: 'hidden'\n      };\n      baseContainerStyle.borderRadius = config.containerBorderRadius;\n      var containerStyle = [baseContainerStyle, this.props.containerStyle];\n      return React.createElement(View, {\n        style: containerStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        }\n      }, options);\n    }\n  }, {\n    key: \"renderOption\",\n    value: function renderOption(config, option, selected, onSelect, index) {\n      var disabled = this.props.enabled === false;\n      var baseTextStyle = {\n        textAlign: config.textAlign\n      };\n      var normalTextStyle = [baseTextStyle, this.props.optionStyle, {\n        color: config.tint\n      }];\n      var selectedTextStyle = [baseTextStyle, this.props.optionStyle, {\n        color: config.selectedTint\n      }];\n      var baseColor = selected ? config.selectedBackgroundColor : config.backgroundColor;\n      var opacity = disabled ? 0.5 : 1.0;\n      var baseOptionContainerStyle = [{\n        paddingTop: config.paddingTop,\n        paddingBottom: config.paddingBottom,\n        backgroundColor: baseColor,\n        opacity: opacity\n      }, config.direction === 'row' && {\n        flex: 1\n      }];\n      var borderStyles = config.direction === 'row' ? {\n        borderLeftWidth: config.separatorWidth,\n        borderLeftColor: config.separatorTint\n      } : {\n        borderTopWidth: config.separatorWidth,\n        borderTopColor: config.separatorTint\n      };\n      var separatorStyle = [baseOptionContainerStyle, borderStyles];\n      var containerBorderRadius = config.containerBorderRadius,\n          containerBorderWidth = config.containerBorderWidth;\n      var borderRadiusStyle;\n\n      if (Platform.OS === \"android\" && containerBorderRadius) {\n        var adjustedBorderRadius = containerBorderRadius - containerBorderWidth;\n\n        if (this.props.options.length > 1) {\n          if (index === 0) {\n            borderRadiusStyle = config.direction === 'row' ? {\n              borderTopLeftRadius: adjustedBorderRadius,\n              borderBottomLeftRadius: adjustedBorderRadius\n            } : {\n              borderTopLeftRadius: adjustedBorderRadius,\n              borderTopRightRadius: adjustedBorderRadius\n            };\n          } else if (index === this.props.options.length - 1) {\n            borderRadiusStyle = config.direction === 'row' ? {\n              borderTopRightRadius: adjustedBorderRadius,\n              borderBottomRightRadius: adjustedBorderRadius\n            } : {\n              borderBottomLeftRadius: adjustedBorderRadius,\n              borderBottomRightRadius: adjustedBorderRadius\n            };\n          }\n\n          if (index === this.props.options.length - 2) {\n            borderRadiusStyle = config.direction === 'row' ? {\n              borderRightWidth: config.separatorWidth,\n              borderRightColor: config.separatorTint\n            } : {\n              borderBottomWidth: config.separatorWidth,\n              borderBottomColor: config.separatorTint\n            };\n          }\n        } else {\n          borderRadiusStyle = {\n            borderRadius: adjustedBorderRadius\n          };\n        }\n      }\n\n      var textStyle = selected ? selectedTextStyle : normalTextStyle;\n      var label = this.props.extractText ? this.props.extractText(option) : option;\n      var scaleFont = this.props.allowFontScaling === false ? false : true;\n      return React.createElement(TouchableWithoutFeedback, {\n        onPress: onSelect,\n        key: index,\n        disabled: disabled,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        }\n      }, React.createElement(View, {\n        style: [index > 0 ? separatorStyle : baseOptionContainerStyle, this.props.optionContainerStyle, borderRadiusStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        }\n      }, typeof this.props.renderOption === 'function' ? this.props.renderOption.call(this, option, selected) : React.createElement(Text, {\n        allowFontScaling: scaleFont,\n        style: textStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        }\n      }, label)));\n    }\n  }]);\n\n  return SegmentedControls;\n}(React.Component);\n\nvar IOS_BLUE = '#007AFF';\nvar IOS_WHITE = '#ffffff';\nvar DEFAULTS = {\n  direction: 'row',\n  tint: IOS_BLUE,\n  backTint: IOS_WHITE,\n  paddingTop: 5,\n  paddingBottom: 5,\n  textAlign: 'center',\n  selectedTint: IOS_WHITE,\n  selectedBackgroundColor: IOS_WHITE,\n  separatorTint: IOS_BLUE,\n  separatorWidth: 1,\n  containerBorderTint: IOS_BLUE,\n  containerBorderWidth: 1,\n  containerBorderRadius: 5\n};\nexport default SegmentedControls;","map":{"version":3,"sources":["D:/react project/homiApp/homi/node_modules/react-native-radio-buttons/lib/segmented-controls.js"],"names":["React","ReactNative","RadioButtons","Text","TouchableWithoutFeedback","View","Platform","SegmentedControls","config","getConfig","props","renderOption","bind","renderContainer","tint","DEFAULTS","backTint","colors","selectedTint","backgroundColor","selectedBackgroundColor","containerBorderTint","separatorTint","options","baseContainerStyle","flexDirection","direction","borderColor","borderWidth","containerBorderWidth","overflow","borderRadius","containerBorderRadius","containerStyle","option","selected","onSelect","index","disabled","enabled","baseTextStyle","textAlign","normalTextStyle","optionStyle","color","selectedTextStyle","baseColor","opacity","baseOptionContainerStyle","paddingTop","paddingBottom","flex","borderStyles","borderLeftWidth","separatorWidth","borderLeftColor","borderTopWidth","borderTopColor","separatorStyle","borderRadiusStyle","OS","adjustedBorderRadius","length","borderTopLeftRadius","borderBottomLeftRadius","borderTopRightRadius","borderBottomRightRadius","borderRightWidth","borderRightColor","borderBottomWidth","borderBottomColor","textStyle","label","extractText","scaleFont","allowFontScaling","optionContainerStyle","call","Component","IOS_BLUE","IOS_WHITE"],"mappings":"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","sourcesContent":["'use strict';\nimport React from 'react';\nimport ReactNative from 'react-native';\nimport RadioButtons from './';\n\nconst {\n  Text,\n  TouchableWithoutFeedback,\n  View,\n  Platform\n} = ReactNative;\n\nclass SegmentedControls extends React.Component {\n\n  render(){\n    const config = this.getConfig();\n\n    return (\n      <RadioButtons {...this.props}\n        renderOption={ this.renderOption.bind(this, config) }\n        renderContainer={ this.renderContainer.bind(this, config) }\n      />\n    );\n  }\n\n  getConfig(){\n    const tint = this.props.tint || DEFAULTS.tint;\n    const backTint = this.props.backTint || DEFAULTS.backTint;\n    const colors = {\n      tint: tint,\n      selectedTint: backTint,\n      backgroundColor: backTint,\n      selectedBackgroundColor: tint,\n      containerBorderTint: tint,\n      separatorTint: tint,\n    };\n\n    return {\n      ...DEFAULTS,\n      ...colors,\n      ...this.props,\n    };\n  }\n\n  renderContainer(config, options){\n    var baseContainerStyle = {\n      flexDirection: config.direction,\n      backgroundColor: config.backgroundColor,\n      borderColor: config.containerBorderTint,\n      borderWidth: config.containerBorderWidth,\n      overflow: 'hidden'\n    };\n\n    baseContainerStyle.borderRadius = config.containerBorderRadius;\n\n    const containerStyle = [baseContainerStyle, this.props.containerStyle];\n\n    return <View style={ containerStyle }>{options}</View>;\n  }\n\n  renderOption(config, option, selected, onSelect, index){\n\n    const disabled = this.props.enabled === false;\n\n    const baseTextStyle = {\n      textAlign: config.textAlign\n    };\n\n    const normalTextStyle = [baseTextStyle, this.props.optionStyle, {\n      color: config.tint\n    }];\n\n    const selectedTextStyle = [baseTextStyle, this.props.optionStyle, {\n      color: config.selectedTint\n    }];\n\n    const baseColor = selected? config.selectedBackgroundColor: config.backgroundColor;\n    const opacity = disabled ? 0.5 : 1.0;\n    const baseOptionContainerStyle = [{\n      paddingTop: config.paddingTop,\n      paddingBottom: config.paddingBottom,\n      backgroundColor: baseColor,\n      opacity: opacity\n    }, config.direction === 'row' && { flex: 1 }];\n\n    const borderStyles = config.direction === 'row' ?\n      {\n        borderLeftWidth: config.separatorWidth,\n        borderLeftColor: config.separatorTint,\n      } : {\n        borderTopWidth: config.separatorWidth,\n        borderTopColor: config.separatorTint,\n      };\n\n    const separatorStyle = [baseOptionContainerStyle, borderStyles];\n\n    const {containerBorderRadius, containerBorderWidth} = config;\n    let borderRadiusStyle;\n\n    // Workaround to get containerBorderRadius working on Android\n    if (Platform.OS === \"android\" && containerBorderRadius) {\n      const adjustedBorderRadius = containerBorderRadius - containerBorderWidth;\n      if (this.props.options.length > 1) {\n        if (index === 0) {\n          borderRadiusStyle =  config.direction === 'row' ?\n            {\n              borderTopLeftRadius: adjustedBorderRadius,\n              borderBottomLeftRadius: adjustedBorderRadius\n            } : {\n              borderTopLeftRadius: adjustedBorderRadius,\n              borderTopRightRadius: adjustedBorderRadius\n            };\n        } else if (index === this.props.options.length - 1) {\n          borderRadiusStyle =  config.direction === 'row' ?\n            {\n              borderTopRightRadius: adjustedBorderRadius,\n              borderBottomRightRadius: adjustedBorderRadius\n            } : {\n              borderBottomLeftRadius: adjustedBorderRadius,\n              borderBottomRightRadius: adjustedBorderRadius\n            }\n        }\n        if (index === this.props.options.length - 2) {\n          borderRadiusStyle =  config.direction === 'row' ?\n            {\n              borderRightWidth: config.separatorWidth,\n              borderRightColor: config.separatorTint,\n            } : {\n              borderBottomWidth: config.separatorWidth,\n              borderBottomColor: config.separatorTint,\n            }\n        }\n      } else {\n        borderRadiusStyle = {borderRadius: adjustedBorderRadius};\n      }\n    }\n\n    const textStyle = selected ? selectedTextStyle : normalTextStyle;\n\n    const label = this.props.extractText ? this.props.extractText(option) : option;\n\n    // Default to true for undefined - like RN currently does\n    const scaleFont = (this.props.allowFontScaling === false) ? false : true;\n\n    return (\n      <TouchableWithoutFeedback onPress={onSelect} key={index} disabled={disabled}>\n        <View style={[index > 0 ? separatorStyle : baseOptionContainerStyle, this.props.optionContainerStyle, borderRadiusStyle]}>\n          {typeof this.props.renderOption === 'function' ? this.props.renderOption.call(this, option, selected) : (\n            <Text allowFontScaling={scaleFont} style={textStyle}>{label}</Text>\n          )}\n        </View>\n      </TouchableWithoutFeedback>\n    );\n  }\n}\n\nconst IOS_BLUE = '#007AFF';\nconst IOS_WHITE = '#ffffff';\n\nconst DEFAULTS = {\n  direction: 'row',\n\n  tint: IOS_BLUE,\n  backTint: IOS_WHITE,\n\n  paddingTop: 5,\n  paddingBottom: 5,\n  textAlign: 'center',\n\n  selectedTint: IOS_WHITE,\n  selectedBackgroundColor: IOS_WHITE,\n\n  separatorTint: IOS_BLUE,\n  separatorWidth: 1,\n\n  containerBorderTint: IOS_BLUE,\n  containerBorderWidth: 1,\n  containerBorderRadius: 5,\n\n};\nexport default SegmentedControls;\n"]},"metadata":{},"sourceType":"module"}