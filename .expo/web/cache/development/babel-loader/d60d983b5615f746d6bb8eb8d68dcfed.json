{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"D:\\\\react project\\\\homiApp\\\\homi\\\\node_modules\\\\react-native-calendar-picker\\\\CalendarPicker\\\\index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { makeStyles } from \"./makeStyles\";\nimport { Utils } from \"./Utils\";\nimport HeaderControls from \"./HeaderControls\";\nimport Weekdays from \"./Weekdays\";\nimport DaysGridView from \"./DaysGridView\";\nimport Swiper from \"./Swiper\";\nimport moment from \"moment\";\nvar SWIPE_LEFT = \"SWIPE_LEFT\";\nvar SWIPE_RIGHT = \"SWIPE_RIGHT\";\nvar _swipeConfig = {\n  velocityThreshold: 0.3,\n  directionalOffsetThreshold: 80\n};\n\nvar CalendarPicker = function (_Component) {\n  _inherits(CalendarPicker, _Component);\n\n  function CalendarPicker(props) {\n    var _this;\n\n    _classCallCheck(this, CalendarPicker);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CalendarPicker).call(this, props));\n\n    _this.updateDayOfWeekStyles = function (currentDate) {\n      var _this$props = _this.props,\n          startFromMonday = _this$props.startFromMonday,\n          dayOfWeekStyles = _this$props.dayOfWeekStyles;\n      var day = currentDate.clone().startOf('month');\n      var customDatesStyles = [];\n\n      do {\n        var dayIndex = day.day();\n\n        if (startFromMonday) {\n          dayIndex = dayIndex - 1;\n\n          if (dayIndex < 0) {\n            dayIndex = 6;\n          }\n        }\n\n        var currentDayStyle = dayOfWeekStyles[dayIndex];\n\n        if (currentDayStyle) {\n          customDatesStyles.push({\n            date: day.clone(),\n            textStyle: currentDayStyle\n          });\n        }\n      } while (day.add(1, 'day').isSame(currentDate, 'month'));\n\n      _this.setState({\n        defaultCustomDatesStyles: customDatesStyles\n      });\n    };\n\n    _this.state = _objectSpread({\n      currentMonth: null,\n      currentYear: null,\n      selectedStartDate: props.selectedStartDate || null,\n      selectedEndDate: props.selectedEndDate || null,\n      styles: {},\n      defaultCustomDatesStyles: []\n    }, _this.updateScaledStyles(props), {}, _this.updateMonthYear(props.initialDate));\n    _this.updateScaledStyles = _this.updateScaledStyles.bind(_assertThisInitialized(_this));\n    _this.updateMonthYear = _this.updateMonthYear.bind(_assertThisInitialized(_this));\n    _this.handleOnPressPrevious = _this.handleOnPressPrevious.bind(_assertThisInitialized(_this));\n    _this.handleOnPressNext = _this.handleOnPressNext.bind(_assertThisInitialized(_this));\n    _this.handleOnPressDay = _this.handleOnPressDay.bind(_assertThisInitialized(_this));\n    _this.onSwipe = _this.onSwipe.bind(_assertThisInitialized(_this));\n    _this.resetSelections = _this.resetSelections.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(CalendarPicker, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.updateDayOfWeekStyles(moment());\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var newStyles = {};\n      var doStateUpdate = false;\n\n      if (prevProps.width !== this.props.width || prevProps.height !== this.props.height) {\n        newStyles = this.updateScaledStyles(this.props);\n        doStateUpdate = true;\n      }\n\n      var newMonthYear = {};\n\n      if (!moment(prevProps.initialDate).isSame(this.props.initialDate, \"day\")) {\n        newMonthYear = this.updateMonthYear(this.props.initialDate);\n        doStateUpdate = true;\n      }\n\n      var selectedDateRanges = {};\n\n      if (this.props.selectedStartDate && !moment(prevState.selectedStartDate).isSame(this.props.selectedStartDate, \"day\") || this.props.selectedEndDate && !moment(prevState.selectedEndDate).isSame(this.props.selectedEndDate, \"day\")) {\n        var _this$props2 = this.props,\n            _this$props2$selected = _this$props2.selectedStartDate,\n            selectedStartDate = _this$props2$selected === void 0 ? null : _this$props2$selected,\n            _this$props2$selected2 = _this$props2.selectedEndDate,\n            selectedEndDate = _this$props2$selected2 === void 0 ? null : _this$props2$selected2;\n        selectedDateRanges = {\n          selectedStartDate: selectedStartDate,\n          selectedEndDate: selectedEndDate\n        };\n        doStateUpdate = true;\n      }\n\n      if (doStateUpdate) {\n        this.setState(_objectSpread({}, newStyles, {}, newMonthYear, {}, selectedDateRanges));\n      }\n    }\n  }, {\n    key: \"updateScaledStyles\",\n    value: function updateScaledStyles(props) {\n      var scaleFactor = props.scaleFactor,\n          selectedDayColor = props.selectedDayColor,\n          selectedDayTextColor = props.selectedDayTextColor,\n          todayBackgroundColor = props.todayBackgroundColor,\n          width = props.width,\n          height = props.height,\n          dayShape = props.dayShape;\n      var containerWidth = width ? width : Dimensions.get(\"window\").width;\n      var containerHeight = height ? height : Dimensions.get(\"window\").height;\n      var initialScale = Math.min(containerWidth, containerHeight) / scaleFactor;\n      return {\n        styles: makeStyles(initialScale, selectedDayColor, selectedDayTextColor, todayBackgroundColor, dayShape)\n      };\n    }\n  }, {\n    key: \"updateMonthYear\",\n    value: function updateMonthYear() {\n      var initialDate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props.initialDate;\n      return {\n        currentMonth: parseInt(moment(initialDate).month()),\n        currentYear: parseInt(moment(initialDate).year())\n      };\n    }\n  }, {\n    key: \"handleOnPressDay\",\n    value: function handleOnPressDay(day) {\n      var _this$state = this.state,\n          currentYear = _this$state.currentYear,\n          currentMonth = _this$state.currentMonth,\n          selectedStartDate = _this$state.selectedStartDate,\n          selectedEndDate = _this$state.selectedEndDate;\n      var _this$props3 = this.props,\n          allowRangeSelection = _this$props3.allowRangeSelection,\n          onDateChange = _this$props3.onDateChange,\n          enableDateChange = _this$props3.enableDateChange;\n\n      if (!enableDateChange) {\n        return;\n      }\n\n      var date = moment({\n        year: currentYear,\n        month: currentMonth,\n        day: day\n      });\n\n      if (allowRangeSelection && selectedStartDate && date.isSameOrAfter(selectedStartDate) && !selectedEndDate) {\n        this.setState({\n          selectedEndDate: date\n        });\n        onDateChange(date, Utils.END_DATE);\n      } else {\n        this.setState({\n          selectedStartDate: date,\n          selectedEndDate: null\n        });\n        onDateChange(date, Utils.START_DATE);\n      }\n    }\n  }, {\n    key: \"handleOnPressPrevious\",\n    value: function handleOnPressPrevious() {\n      var _this$state2 = this.state,\n          currentMonth = _this$state2.currentMonth,\n          currentYear = _this$state2.currentYear;\n      var previousMonth = currentMonth - 1;\n\n      if (previousMonth < 0) {\n        previousMonth = 11;\n        currentYear -= 1;\n        this.setState({\n          currentMonth: parseInt(previousMonth),\n          currentYear: parseInt(currentYear)\n        });\n      } else {\n        this.setState({\n          currentMonth: parseInt(previousMonth),\n          currentYear: parseInt(currentYear)\n        });\n      }\n\n      try {\n        if (Object.entries(this.props.dayOfWeekStyles).length) {\n          this.updateDayOfWeekStyles(moment({\n            year: currentYear,\n            month: previousMonth\n          }));\n        }\n      } catch (error) {}\n\n      this.props.onMonthChange && this.props.onMonthChange(moment({\n        year: currentYear,\n        month: previousMonth\n      }));\n    }\n  }, {\n    key: \"handleOnPressNext\",\n    value: function handleOnPressNext() {\n      var _this$state3 = this.state,\n          currentMonth = _this$state3.currentMonth,\n          currentYear = _this$state3.currentYear;\n      var nextMonth = currentMonth + 1;\n\n      if (nextMonth > 11) {\n        nextMonth = 0;\n        currentYear += 1;\n        this.setState({\n          currentMonth: parseInt(nextMonth),\n          currentYear: parseInt(currentYear)\n        });\n      } else {\n        this.setState({\n          currentMonth: parseInt(nextMonth),\n          currentYear: parseInt(currentYear)\n        });\n      }\n\n      try {\n        if (Object.entries(this.props.dayOfWeekStyles).length > 0) {\n          this.updateDayOfWeekStyles(moment({\n            year: currentYear,\n            month: nextMonth\n          }));\n        }\n      } catch (error) {}\n\n      this.props.onMonthChange && this.props.onMonthChange(moment({\n        year: currentYear,\n        month: nextMonth\n      }));\n    }\n  }, {\n    key: \"onSwipe\",\n    value: function onSwipe(gestureName) {\n      if (typeof this.props.onSwipe === \"function\") {\n        this.props.onSwipe(gestureName);\n        return;\n      }\n\n      switch (gestureName) {\n        case SWIPE_LEFT:\n          this.handleOnPressNext();\n          break;\n\n        case SWIPE_RIGHT:\n          this.handleOnPressPrevious();\n          break;\n      }\n    }\n  }, {\n    key: \"resetSelections\",\n    value: function resetSelections() {\n      this.setState({\n        selectedStartDate: null,\n        selectedEndDate: null\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state4 = this.state,\n          currentMonth = _this$state4.currentMonth,\n          currentYear = _this$state4.currentYear,\n          selectedStartDate = _this$state4.selectedStartDate,\n          selectedEndDate = _this$state4.selectedEndDate,\n          styles = _this$state4.styles,\n          defaultCustomDatesStyles = _this$state4.defaultCustomDatesStyles;\n      var _this$props4 = this.props,\n          allowRangeSelection = _this$props4.allowRangeSelection,\n          startFromMonday = _this$props4.startFromMonday,\n          initialDate = _this$props4.initialDate,\n          minDate = _this$props4.minDate,\n          maxDate = _this$props4.maxDate,\n          weekdays = _this$props4.weekdays,\n          months = _this$props4.months,\n          previousTitle = _this$props4.previousTitle,\n          nextTitle = _this$props4.nextTitle,\n          textStyle = _this$props4.textStyle,\n          todayTextStyle = _this$props4.todayTextStyle,\n          selectedDayStyle = _this$props4.selectedDayStyle,\n          selectedRangeStartStyle = _this$props4.selectedRangeStartStyle,\n          selectedRangeStyle = _this$props4.selectedRangeStyle,\n          selectedRangeEndStyle = _this$props4.selectedRangeEndStyle,\n          disabledDates = _this$props4.disabledDates,\n          disabledDatesTextStyle = _this$props4.disabledDatesTextStyle,\n          minRangeDuration = _this$props4.minRangeDuration,\n          maxRangeDuration = _this$props4.maxRangeDuration,\n          swipeConfig = _this$props4.swipeConfig,\n          customDatesStyles = _this$props4.customDatesStyles,\n          enableDateChange = _this$props4.enableDateChange,\n          restrictMonthNavigation = _this$props4.restrictMonthNavigation,\n          headingLevel = _this$props4.headingLevel,\n          dayLabelsWrapper = _this$props4.dayLabelsWrapper,\n          dayOfWeekStyles = _this$props4.dayOfWeekStyles,\n          previousTitleStyle = _this$props4.previousTitleStyle,\n          nextTitleStyle = _this$props4.nextTitleStyle;\n      var _disabledDates = [];\n      var tempCustomDatesStyles = customDatesStyles;\n\n      if (Object.entries(dayOfWeekStyles).length > 0) {\n        tempCustomDatesStyles = customDatesStyles ? customDatesStyles : defaultCustomDatesStyles;\n      }\n\n      if (disabledDates) {\n        if (Array.isArray(disabledDates)) {\n          disabledDates.map(function (date) {\n            var thisDate = moment(date);\n            thisDate.set({\n              hour: 0,\n              minute: 0,\n              second: 0,\n              millisecond: 0\n            });\n\n            _disabledDates.push(thisDate.valueOf());\n          });\n        } else if (disabledDates instanceof Function) {\n          _disabledDates = disabledDates;\n        }\n      }\n\n      var minRangeDurationTime = [];\n\n      if (allowRangeSelection && minRangeDuration) {\n        if (Array.isArray(minRangeDuration)) {\n          minRangeDuration.map(function (minRangeDuration) {\n            var thisDate = moment(minRangeDuration.date);\n            thisDate.set({\n              hour: 0,\n              minute: 0,\n              second: 0,\n              millisecond: 0\n            });\n            minRangeDurationTime.push({\n              date: thisDate.valueOf(),\n              minDuration: minRangeDuration.minDuration\n            });\n          });\n        } else {\n          minRangeDurationTime = minRangeDuration;\n        }\n      }\n\n      var maxRangeDurationTime = [];\n\n      if (allowRangeSelection && maxRangeDuration) {\n        if (Array.isArray(maxRangeDuration)) {\n          maxRangeDuration.map(function (maxRangeDuration) {\n            var thisDate = moment(maxRangeDuration.date);\n            thisDate.set({\n              hour: 0,\n              minute: 0,\n              second: 0,\n              millisecond: 0\n            });\n            maxRangeDurationTime.push({\n              date: thisDate.valueOf(),\n              maxDuration: maxRangeDuration.maxDuration\n            });\n          });\n        } else {\n          maxRangeDurationTime = maxRangeDuration;\n        }\n      }\n\n      return React.createElement(Swiper, {\n        onSwipe: function onSwipe(direction) {\n          return _this2.props.enableSwipe && _this2.onSwipe(direction);\n        },\n        config: _objectSpread({}, _swipeConfig, {}, swipeConfig),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 375\n        }\n      }, React.createElement(View, {\n        style: styles.calendar,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 379\n        }\n      }, React.createElement(HeaderControls, {\n        styles: styles,\n        currentMonth: currentMonth,\n        currentYear: currentYear,\n        initialDate: moment(initialDate),\n        onPressPrevious: this.handleOnPressPrevious,\n        onPressNext: this.handleOnPressNext,\n        months: months,\n        previousTitle: previousTitle,\n        nextTitle: nextTitle,\n        textStyle: textStyle,\n        restrictMonthNavigation: restrictMonthNavigation,\n        maxDate: maxDate,\n        minDate: minDate,\n        headingLevel: headingLevel,\n        previousTitleStyle: previousTitleStyle,\n        nextTitleStyle: nextTitleStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 380\n        }\n      }), React.createElement(Weekdays, {\n        styles: styles,\n        startFromMonday: startFromMonday,\n        weekdays: weekdays,\n        textStyle: textStyle,\n        dayLabelsWrapper: dayLabelsWrapper,\n        dayOfWeekStyles: dayOfWeekStyles,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 398\n        }\n      }), React.createElement(DaysGridView, {\n        enableDateChange: enableDateChange,\n        month: currentMonth,\n        year: currentYear,\n        styles: styles,\n        onPressDay: this.handleOnPressDay,\n        disabledDates: _disabledDates,\n        disabledDatesTextStyle: disabledDatesTextStyle,\n        minRangeDuration: minRangeDurationTime,\n        maxRangeDuration: maxRangeDurationTime,\n        startFromMonday: startFromMonday,\n        allowRangeSelection: allowRangeSelection,\n        selectedStartDate: selectedStartDate && moment(selectedStartDate),\n        selectedEndDate: selectedEndDate && moment(selectedEndDate),\n        minDate: minDate && moment(minDate),\n        maxDate: maxDate && moment(maxDate),\n        textStyle: textStyle,\n        todayTextStyle: todayTextStyle,\n        selectedDayStyle: selectedDayStyle,\n        selectedRangeStartStyle: selectedRangeStartStyle,\n        selectedRangeStyle: selectedRangeStyle,\n        selectedRangeEndStyle: selectedRangeEndStyle,\n        customDatesStyles: tempCustomDatesStyles,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 406\n        }\n      })));\n    }\n  }]);\n\n  return CalendarPicker;\n}(Component);\n\nCalendarPicker.defaultProps = {\n  initialDate: moment(),\n  scaleFactor: 375,\n  enableSwipe: true,\n  onDateChange: function onDateChange() {\n    console.log(\"onDateChange() not provided\");\n  },\n  enableDateChange: true,\n  headingLevel: 1,\n  sundayColor: '#FFFFFF',\n  dayOfWeekStyles: {}\n};\nexport { CalendarPicker as default };","map":{"version":3,"sources":["D:/react project/homiApp/homi/node_modules/react-native-calendar-picker/CalendarPicker/index.js"],"names":["React","Component","makeStyles","Utils","HeaderControls","Weekdays","DaysGridView","Swiper","moment","SWIPE_LEFT","SWIPE_RIGHT","_swipeConfig","velocityThreshold","directionalOffsetThreshold","CalendarPicker","props","updateDayOfWeekStyles","currentDate","startFromMonday","dayOfWeekStyles","day","clone","startOf","customDatesStyles","dayIndex","currentDayStyle","push","date","textStyle","add","isSame","setState","defaultCustomDatesStyles","state","currentMonth","currentYear","selectedStartDate","selectedEndDate","styles","updateScaledStyles","updateMonthYear","initialDate","bind","handleOnPressPrevious","handleOnPressNext","handleOnPressDay","onSwipe","resetSelections","prevProps","prevState","newStyles","doStateUpdate","width","height","newMonthYear","selectedDateRanges","scaleFactor","selectedDayColor","selectedDayTextColor","todayBackgroundColor","dayShape","containerWidth","Dimensions","get","containerHeight","initialScale","Math","min","parseInt","month","year","allowRangeSelection","onDateChange","enableDateChange","isSameOrAfter","END_DATE","START_DATE","previousMonth","Object","entries","length","error","onMonthChange","nextMonth","gestureName","minDate","maxDate","weekdays","months","previousTitle","nextTitle","todayTextStyle","selectedDayStyle","selectedRangeStartStyle","selectedRangeStyle","selectedRangeEndStyle","disabledDates","disabledDatesTextStyle","minRangeDuration","maxRangeDuration","swipeConfig","restrictMonthNavigation","headingLevel","dayLabelsWrapper","previousTitleStyle","nextTitleStyle","_disabledDates","tempCustomDatesStyles","Array","isArray","map","thisDate","set","hour","minute","second","millisecond","valueOf","Function","minRangeDurationTime","minDuration","maxRangeDurationTime","maxDuration","direction","enableSwipe","calendar","defaultProps","console","log","sundayColor"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { View, Text, Dimensions, StyleSheet } from \"react-native\";\r\nimport { makeStyles } from \"./makeStyles\";\r\nimport { Utils } from \"./Utils\";\r\nimport HeaderControls from \"./HeaderControls\";\r\nimport Weekdays from \"./Weekdays\";\r\nimport DaysGridView from \"./DaysGridView\";\r\nimport Swiper from \"./Swiper\";\r\nimport moment from \"moment\";\r\n\r\nconst SWIPE_LEFT = \"SWIPE_LEFT\";\r\nconst SWIPE_RIGHT = \"SWIPE_RIGHT\";\r\n\r\nconst _swipeConfig = {\r\n  velocityThreshold: 0.3,\r\n  directionalOffsetThreshold: 80\r\n};\r\n\r\nexport default class CalendarPicker extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      currentMonth: null,\r\n      currentYear: null,\r\n      selectedStartDate: props.selectedStartDate || null,\r\n      selectedEndDate: props.selectedEndDate || null,\r\n      styles: {},\r\n      defaultCustomDatesStyles: [],\r\n      ...this.updateScaledStyles(props),\r\n      ...this.updateMonthYear(props.initialDate)\r\n    };\r\n    this.updateScaledStyles = this.updateScaledStyles.bind(this);\r\n    this.updateMonthYear = this.updateMonthYear.bind(this);\r\n    this.handleOnPressPrevious = this.handleOnPressPrevious.bind(this);\r\n    this.handleOnPressNext = this.handleOnPressNext.bind(this);\r\n    this.handleOnPressDay = this.handleOnPressDay.bind(this);\r\n    this.onSwipe = this.onSwipe.bind(this);\r\n    this.resetSelections = this.resetSelections.bind(this);\r\n  }\r\n\r\n  static defaultProps = {\r\n    initialDate: moment(),\r\n    scaleFactor: 375,\r\n    enableSwipe: true,\r\n    onDateChange: () => {\r\n      console.log(\"onDateChange() not provided\");\r\n    },\r\n    enableDateChange: true,\r\n    headingLevel: 1,\r\n    sundayColor: '#FFFFFF',\r\n    dayOfWeekStyles: {},\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.updateDayOfWeekStyles(moment());\r\n  }\r\n\r\n  updateDayOfWeekStyles = currentDate => {\r\n    const {startFromMonday, dayOfWeekStyles} = this.props;\r\n    let day = currentDate.clone().startOf('month');\r\n\r\n    let customDatesStyles = [];\r\n    do {\r\n      // console.log('Date: ' + day.date());\r\n      let dayIndex = day.day();\r\n      if (startFromMonday) {\r\n        dayIndex = dayIndex - 1;\r\n        if (dayIndex < 0) {\r\n          dayIndex = 6; // This is Sunday.\r\n        }\r\n      }\r\n      let currentDayStyle = dayOfWeekStyles[dayIndex];\r\n      if (currentDayStyle) {\r\n        customDatesStyles.push({\r\n          date: day.clone(),\r\n          textStyle: currentDayStyle,\r\n        });\r\n      }\r\n    } while (day.add(1, 'day').isSame(currentDate, 'month'));\r\n    this.setState({defaultCustomDatesStyles: customDatesStyles});\r\n  };\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    let newStyles = {};\r\n    let doStateUpdate = false;\r\n\r\n    if (\r\n      prevProps.width !== this.props.width ||\r\n      prevProps.height !== this.props.height\r\n    ) {\r\n      newStyles = this.updateScaledStyles(this.props);\r\n      doStateUpdate = true;\r\n    }\r\n\r\n    let newMonthYear = {};\r\n    if (!moment(prevProps.initialDate).isSame(this.props.initialDate, \"day\")) {\r\n      newMonthYear = this.updateMonthYear(this.props.initialDate);\r\n      doStateUpdate = true;\r\n    }\r\n\r\n    let selectedDateRanges = {};\r\n    if (\r\n      (this.props.selectedStartDate &&\r\n        !moment(prevState.selectedStartDate).isSame(\r\n          this.props.selectedStartDate,\r\n          \"day\"\r\n        )) ||\r\n      (this.props.selectedEndDate &&\r\n        !moment(prevState.selectedEndDate).isSame(\r\n          this.props.selectedEndDate,\r\n          \"day\"\r\n        ))\r\n    ) {\r\n      const { selectedStartDate = null, selectedEndDate = null } = this.props;\r\n      selectedDateRanges = {\r\n        selectedStartDate,\r\n        selectedEndDate\r\n      };\r\n      doStateUpdate = true;\r\n    }\r\n\r\n    if (doStateUpdate) {\r\n      this.setState({ ...newStyles, ...newMonthYear, ...selectedDateRanges });\r\n    }\r\n  }\r\n\r\n  updateScaledStyles(props) {\r\n    const {\r\n      scaleFactor,\r\n      selectedDayColor,\r\n      selectedDayTextColor,\r\n      todayBackgroundColor,\r\n      width,\r\n      height,\r\n      dayShape\r\n    } = props;\r\n\r\n    // The styles in makeStyles are intially scaled to this width\r\n    const containerWidth = width ? width : Dimensions.get(\"window\").width;\r\n    const containerHeight = height ? height : Dimensions.get(\"window\").height;\r\n    const initialScale =\r\n      Math.min(containerWidth, containerHeight) / scaleFactor;\r\n    return {\r\n      styles: makeStyles(\r\n        initialScale,\r\n        selectedDayColor,\r\n        selectedDayTextColor,\r\n        todayBackgroundColor,\r\n        dayShape\r\n      )\r\n    };\r\n  }\r\n\r\n  updateMonthYear(initialDate = this.props.initialDate) {\r\n    return {\r\n      currentMonth: parseInt(moment(initialDate).month()),\r\n      currentYear: parseInt(moment(initialDate).year())\r\n    };\r\n  }\r\n\r\n  handleOnPressDay(day) {\r\n    const {\r\n      currentYear,\r\n      currentMonth,\r\n      selectedStartDate,\r\n      selectedEndDate\r\n    } = this.state;\r\n\r\n    const { allowRangeSelection, onDateChange, enableDateChange } = this.props;\r\n\r\n    if (!enableDateChange) {\r\n      return;\r\n    }\r\n\r\n    const date = moment({ year: currentYear, month: currentMonth, day });\r\n\r\n    if (\r\n      allowRangeSelection &&\r\n      selectedStartDate &&\r\n      date.isSameOrAfter(selectedStartDate) &&\r\n      !selectedEndDate\r\n    ) {\r\n      this.setState({\r\n        selectedEndDate: date\r\n      });\r\n      // propagate to parent date has changed\r\n      onDateChange(date, Utils.END_DATE);\r\n    } else {\r\n      this.setState({\r\n        selectedStartDate: date,\r\n        selectedEndDate: null\r\n      });\r\n      // propagate to parent date has changed\r\n      onDateChange(date, Utils.START_DATE);\r\n    }\r\n  }\r\n\r\n  handleOnPressPrevious() {\r\n    let { currentMonth, currentYear } = this.state;\r\n    let previousMonth = currentMonth - 1;\r\n    // if previousMonth is negative it means the current month is January,\r\n    // so we have to go back to previous year and set the current month to December\r\n    if (previousMonth < 0) {\r\n      previousMonth = 11;\r\n      currentYear -= 1; // decrement year\r\n      this.setState({\r\n        currentMonth: parseInt(previousMonth), // setting month to December\r\n        currentYear: parseInt(currentYear)\r\n      });\r\n    } else {\r\n      this.setState({\r\n        currentMonth: parseInt(previousMonth),\r\n        currentYear: parseInt(currentYear)\r\n      });\r\n    }\r\n    try {\r\n      if (Object.entries(this.props.dayOfWeekStyles).length) {\r\n        this.updateDayOfWeekStyles(\r\n          moment({year: currentYear, month: previousMonth}),\r\n        );\r\n      }\r\n    } catch (error) {}\r\n    this.props.onMonthChange &&\r\n      this.props.onMonthChange(\r\n        moment({ year: currentYear, month: previousMonth })\r\n      );\r\n  }\r\n\r\n  handleOnPressNext() {\r\n    let { currentMonth, currentYear } = this.state;\r\n    let nextMonth = currentMonth + 1;\r\n    // if nextMonth is greater than 11 it means the current month is December,\r\n    // so we have to go forward to the next year and set the current month to January\r\n    if (nextMonth > 11) {\r\n      nextMonth = 0;\r\n      currentYear += 1; // increment year\r\n      this.setState({\r\n        currentMonth: parseInt(nextMonth), // setting month to January\r\n        currentYear: parseInt(currentYear)\r\n      });\r\n    } else {\r\n      this.setState({\r\n        currentMonth: parseInt(nextMonth),\r\n        currentYear: parseInt(currentYear)\r\n      });\r\n    }\r\n    try {\r\n      if (Object.entries(this.props.dayOfWeekStyles).length > 0) {\r\n        this.updateDayOfWeekStyles(moment({year: currentYear, month: nextMonth}));\r\n      }\r\n    } catch (error) {}\r\n    this.props.onMonthChange &&\r\n      this.props.onMonthChange(moment({ year: currentYear, month: nextMonth }));\r\n  }\r\n\r\n  onSwipe(gestureName) {\r\n    if (typeof this.props.onSwipe === \"function\") {\r\n      this.props.onSwipe(gestureName);\r\n      return;\r\n    }\r\n    switch (gestureName) {\r\n      case SWIPE_LEFT:\r\n        this.handleOnPressNext();\r\n        break;\r\n      case SWIPE_RIGHT:\r\n        this.handleOnPressPrevious();\r\n        break;\r\n    }\r\n  }\r\n\r\n  resetSelections() {\r\n    this.setState({\r\n      selectedStartDate: null,\r\n      selectedEndDate: null\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      currentMonth,\r\n      currentYear,\r\n      selectedStartDate,\r\n      selectedEndDate,\r\n      styles,\r\n      defaultCustomDatesStyles,\r\n    } = this.state;\r\n\r\n    const {\r\n      allowRangeSelection,\r\n      startFromMonday,\r\n      initialDate,\r\n      minDate,\r\n      maxDate,\r\n      weekdays,\r\n      months,\r\n      previousTitle,\r\n      nextTitle,\r\n      textStyle,\r\n      todayTextStyle,\r\n      selectedDayStyle,\r\n      selectedRangeStartStyle,\r\n      selectedRangeStyle,\r\n      selectedRangeEndStyle,\r\n      disabledDates,\r\n      disabledDatesTextStyle,\r\n      minRangeDuration,\r\n      maxRangeDuration,\r\n      swipeConfig,\r\n      customDatesStyles,\r\n      enableDateChange,\r\n      restrictMonthNavigation,\r\n      headingLevel,\r\n      dayLabelsWrapper,\r\n      dayOfWeekStyles,\r\n      previousTitleStyle,\r\n      nextTitleStyle,\r\n    } = this.props;\r\n\r\n    let _disabledDates = [];\r\n    let tempCustomDatesStyles = customDatesStyles;\r\n    if (Object.entries(dayOfWeekStyles).length > 0) {\r\n      tempCustomDatesStyles = customDatesStyles\r\n        ? customDatesStyles\r\n        : defaultCustomDatesStyles;\r\n    }\r\n    if (disabledDates) {\r\n      if (Array.isArray(disabledDates)) {\r\n        // Convert input date into timestamp\r\n        disabledDates.map(date => {\r\n          let thisDate = moment(date);\r\n          thisDate.set({ hour: 0, minute: 0, second: 0, millisecond: 0 });\r\n          _disabledDates.push(thisDate.valueOf());\r\n        });\r\n      }\r\n      else if (disabledDates instanceof Function) {\r\n        _disabledDates = disabledDates;\r\n      }\r\n    }\r\n\r\n    let minRangeDurationTime = [];\r\n\r\n    if (allowRangeSelection && minRangeDuration) {\r\n      if (Array.isArray(minRangeDuration)) {\r\n        minRangeDuration.map(minRangeDuration => {\r\n          let thisDate = moment(minRangeDuration.date);\r\n          thisDate.set({ hour: 0, minute: 0, second: 0, millisecond: 0 });\r\n          minRangeDurationTime.push({\r\n            date: thisDate.valueOf(),\r\n            minDuration: minRangeDuration.minDuration\r\n          });\r\n        });\r\n      } else {\r\n        minRangeDurationTime = minRangeDuration;\r\n      }\r\n    }\r\n\r\n    let maxRangeDurationTime = [];\r\n\r\n    if (allowRangeSelection && maxRangeDuration) {\r\n      if (Array.isArray(maxRangeDuration)) {\r\n        maxRangeDuration.map(maxRangeDuration => {\r\n          let thisDate = moment(maxRangeDuration.date);\r\n          thisDate.set({ hour: 0, minute: 0, second: 0, millisecond: 0 });\r\n          maxRangeDurationTime.push({\r\n            date: thisDate.valueOf(),\r\n            maxDuration: maxRangeDuration.maxDuration\r\n          });\r\n        });\r\n      } else {\r\n        maxRangeDurationTime = maxRangeDuration;\r\n      }\r\n    }\r\n\r\n    return (\r\n      <Swiper\r\n        onSwipe={direction => this.props.enableSwipe && this.onSwipe(direction)}\r\n        config={{ ..._swipeConfig, ...swipeConfig }}\r\n      >\r\n        <View style={styles.calendar}>\r\n          <HeaderControls\r\n            styles={styles}\r\n            currentMonth={currentMonth}\r\n            currentYear={currentYear}\r\n            initialDate={moment(initialDate)}\r\n            onPressPrevious={this.handleOnPressPrevious}\r\n            onPressNext={this.handleOnPressNext}\r\n            months={months}\r\n            previousTitle={previousTitle}\r\n            nextTitle={nextTitle}\r\n            textStyle={textStyle}\r\n            restrictMonthNavigation={restrictMonthNavigation}\r\n            maxDate={maxDate}\r\n            minDate={minDate}\r\n            headingLevel={headingLevel}\r\n            previousTitleStyle={previousTitleStyle}\r\n            nextTitleStyle={nextTitleStyle}\r\n          />\r\n          <Weekdays\r\n            styles={styles}\r\n            startFromMonday={startFromMonday}\r\n            weekdays={weekdays}\r\n            textStyle={textStyle}\r\n            dayLabelsWrapper={dayLabelsWrapper}\r\n            dayOfWeekStyles={dayOfWeekStyles}\r\n          />\r\n          <DaysGridView\r\n            enableDateChange={enableDateChange}\r\n            month={currentMonth}\r\n            year={currentYear}\r\n            styles={styles}\r\n            onPressDay={this.handleOnPressDay}\r\n            disabledDates={_disabledDates}\r\n            disabledDatesTextStyle={disabledDatesTextStyle}\r\n            minRangeDuration={minRangeDurationTime}\r\n            maxRangeDuration={maxRangeDurationTime}\r\n            startFromMonday={startFromMonday}\r\n            allowRangeSelection={allowRangeSelection}\r\n            selectedStartDate={selectedStartDate && moment(selectedStartDate)}\r\n            selectedEndDate={selectedEndDate && moment(selectedEndDate)}\r\n            minDate={minDate && moment(minDate)}\r\n            maxDate={maxDate && moment(maxDate)}\r\n            textStyle={textStyle}\r\n            todayTextStyle={todayTextStyle}\r\n            selectedDayStyle={selectedDayStyle}\r\n            selectedRangeStartStyle={selectedRangeStartStyle}\r\n            selectedRangeStyle={selectedRangeStyle}\r\n            selectedRangeEndStyle={selectedRangeEndStyle}\r\n            customDatesStyles={tempCustomDatesStyles}\r\n          />\r\n        </View>\r\n      </Swiper>\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}