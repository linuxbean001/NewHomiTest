{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"D:\\\\react project\\\\homiApp\\\\homi\\\\node_modules\\\\react-native-step-progress\\\\StepProgress.js\";\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nvar STEP_STATUS = {\n  CURRENT: 'current',\n  FINISHED: 'finished',\n  UNFINISHED: 'unfinished'\n};\nexport default function StepProgress(props) {\n  var defaultStyles = {\n    stepIndicatorSize: 30,\n    currentStepIndicatorSize: 40,\n    separatorStrokeWidth: 3,\n    separatorStrokeUnfinishedWidth: 0,\n    separatorStrokeFinishedWidth: 0,\n    currentStepStrokeWidth: 5,\n    stepStrokeWidth: 0,\n    stepStrokeCurrentColor: '#4aae4f',\n    stepStrokeFinishedColor: '#4aae4f',\n    stepStrokeUnFinishedColor: '#4aae4f',\n    separatorFinishedColor: '#4aae4f',\n    separatorUnFinishedColor: '#a4d4a5',\n    stepIndicatorFinishedColor: '#4aae4f',\n    stepIndicatorUnFinishedColor: '#a4d4a5',\n    stepIndicatorCurrentColor: '#ffffff',\n    stepIndicatorLabelFontSize: 15,\n    currentStepIndicatorLabelFontSize: 15,\n    stepIndicatorLabelCurrentColor: '#000000',\n    stepIndicatorLabelFinishedColor: '#ffffff',\n    stepIndicatorLabelUnFinishedColor: 'rgba(255,255,255,0.5)',\n    labelColor: '#000000',\n    labelSize: 13,\n    labelAlign: 'center',\n    currentStepLabelColor: '#4aae4f'\n  };\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      width = _useState2[0],\n      setWidth = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      height = _useState4[0],\n      setHeight = _useState4[1];\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      progressBarSize = _useState6[0],\n      setProgressBarSize = _useState6[1];\n\n  var _useState7 = useState(_extends(defaultStyles, props.customStyles)),\n      _useState8 = _slicedToArray(_useState7, 2),\n      customStyles = _useState8[0],\n      setCustomStyles = _useState8[1];\n\n  var progressAnim = new Animated.Value(0);\n  var sizeAnim = new Animated.Value(customStyles.stepIndicatorSize);\n  var borderRadiusAnim = new Animated.Value(customStyles.stepIndicatorSize / 2);\n\n  function stepPressed(position) {\n    if (props.onPress) {\n      props.onPress(position);\n    }\n  }\n\n  var labels = props.labels,\n      direction = props.direction;\n  useEffect(function () {\n    setCustomStyles(_extends(customStyles, props.customStyles));\n    onCurrentPositionChanged(props.currentPosition);\n  });\n\n  renderProgressBarBackground = function renderProgressBarBackground() {\n    var stepCount = props.stepCount,\n        direction = props.direction;\n    var progressBarBackgroundStyle;\n\n    if (direction === 'vertical') {\n      progressBarBackgroundStyle = {\n        backgroundColor: customStyles.separatorUnFinishedColor,\n        position: 'absolute',\n        left: (width - customStyles.separatorStrokeWidth) / 2,\n        top: height / (2 * stepCount),\n        bottom: height / (2 * stepCount),\n        width: customStyles.separatorStrokeUnfinishedWidth == 0 ? customStyles.separatorStrokeWidth : customStyles.separatorStrokeUnfinishedWidth\n      };\n    } else {\n      progressBarBackgroundStyle = {\n        backgroundColor: customStyles.separatorUnFinishedColor,\n        position: 'absolute',\n        top: (height - customStyles.separatorStrokeWidth) / 2,\n        left: width / (2 * stepCount),\n        right: width / (2 * stepCount),\n        height: customStyles.separatorStrokeUnfinishedWidth == 0 ? customStyles.separatorStrokeWidth : customStyles.separatorStrokeUnfinishedWidth\n      };\n    }\n\n    return React.createElement(View, {\n      onLayout: function onLayout(event) {\n        if (direction === 'vertical') {\n          setProgressBarSize(event.nativeEvent.layout.height);\n        } else {\n          setProgressBarSize(event.nativeEvent.layout.width);\n        }\n      },\n      style: progressBarBackgroundStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      }\n    });\n  };\n\n  renderProgressBar = function renderProgressBar() {\n    var stepCount = props.stepCount,\n        direction = props.direction;\n    var progressBarStyle;\n\n    if (direction === 'vertical') {\n      progressBarStyle = {\n        backgroundColor: customStyles.separatorFinishedColor,\n        position: 'absolute',\n        left: (width - customStyles.separatorStrokeWidth) / 2,\n        top: height / (2 * stepCount),\n        bottom: height / (2 * stepCount),\n        width: customStyles.separatorStrokeFinishedWidth == 0 ? customStyles.separatorStrokeWidth : customStyles.separatorStrokeFinishedWidth,\n        height: progressAnim\n      };\n    } else {\n      progressBarStyle = {\n        backgroundColor: customStyles.separatorFinishedColor,\n        position: 'absolute',\n        top: (height - customStyles.separatorStrokeWidth) / 2,\n        left: width / (2 * stepCount),\n        right: width / (2 * stepCount),\n        height: customStyles.separatorStrokeFinishedWidth == 0 ? customStyles.separatorStrokeWidth : customStyles.separatorStrokeFinishedWidth,\n        width: progressAnim\n      };\n    }\n\n    return React.createElement(Animated.View, {\n      style: progressBarStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      }\n    });\n  };\n\n  renderStepProgress = function renderStepProgress() {\n    var steps = [];\n    var labels = props.labels,\n        stepCount = props.stepCount,\n        direction = props.direction;\n\n    var _loop = function _loop(position) {\n      steps.push(React.createElement(TouchableWithoutFeedback, {\n        key: position,\n        onPress: function onPress() {\n          return stepPressed(position);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        }\n      }, React.createElement(View, {\n        style: [styles.stepContainer, direction === 'vertical' ? {\n          flexDirection: 'column'\n        } : {\n          flexDirection: 'row'\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        }\n      }, renderStep(position))));\n    };\n\n    for (var position = 0; position < stepCount; position++) {\n      _loop(position);\n    }\n\n    return React.createElement(View, {\n      onLayout: function onLayout(event) {\n        setWidth(event.nativeEvent.layout.width);\n        setHeight(event.nativeEvent.layout.height);\n      },\n      style: [styles.stepIndicatorContainer, direction === 'vertical' ? {\n        flexDirection: 'column',\n        width: customStyles.currentStepIndicatorSize\n      } : {\n        flexDirection: 'row',\n        height: customStyles.currentStepIndicatorSize\n      }],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      }\n    }, steps);\n  };\n\n  renderStepLabels = function renderStepLabels() {\n    var labels = props.labels,\n        direction = props.direction,\n        currentPosition = props.currentPosition,\n        renderLabel = props.renderLabel;\n    var labelViews = labels.map(function (label, index) {\n      var selectedStepLabelStyle = index === currentPosition ? {\n        color: customStyles.currentStepLabelColor\n      } : {\n        color: customStyles.labelColor\n      };\n      return React.createElement(TouchableWithoutFeedback, {\n        style: styles.stepLabelItem,\n        key: index,\n        onPress: function onPress() {\n          return stepPressed(index);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208\n        }\n      }, React.createElement(View, {\n        style: styles.stepLabelItem,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213\n        }\n      }, renderLabel ? renderLabel({\n        position: index,\n        stepStatus: getStepStatus(index),\n        label: label,\n        currentPosition: currentPosition\n      }) : React.createElement(Text, {\n        style: [styles.stepLabel, selectedStepLabelStyle, {\n          fontSize: customStyles.labelSize,\n          fontFamily: customStyles.labelFontFamily\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        }\n      }, label)));\n    });\n    return React.createElement(View, {\n      style: [styles.stepLabelsContainer, direction === 'vertical' ? {\n        flexDirection: 'column',\n        paddingHorizontal: 4\n      } : {\n        flexDirection: 'row',\n        paddingVertical: 4\n      }, {\n        alignItems: customStyles.labelAlign\n      }],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241\n      }\n    }, labelViews);\n  };\n\n  renderStep = function renderStep(position) {\n    var currentPosition = props.currentPosition,\n        stepCount = props.stepCount,\n        direction = props.direction,\n        renderStepProgress = props.renderStepProgress;\n    var stepStyle;\n    var indicatorLabelStyle;\n    var separatorStyle = direction === 'vertical' ? {\n      width: customStyles.separatorStrokeWidth,\n      zIndex: 10\n    } : {\n      height: customStyles.separatorStrokeWidth\n    };\n\n    switch (getStepStatus(position)) {\n      case STEP_STATUS.CURRENT:\n        {\n          stepStyle = {\n            backgroundColor: customStyles.stepIndicatorCurrentColor,\n            borderWidth: customStyles.currentStepStrokeWidth,\n            borderColor: customStyles.stepStrokeCurrentColor,\n            height: sizeAnim,\n            width: sizeAnim,\n            borderRadius: borderRadiusAnim\n          };\n          indicatorLabelStyle = {\n            fontSize: customStyles.currentStepIndicatorLabelFontSize,\n            color: customStyles.stepIndicatorLabelCurrentColor\n          };\n          break;\n        }\n\n      case STEP_STATUS.FINISHED:\n        {\n          stepStyle = {\n            backgroundColor: customStyles.stepIndicatorFinishedColor,\n            borderWidth: customStyles.stepStrokeWidth,\n            borderColor: customStyles.stepStrokeFinishedColor,\n            height: customStyles.stepIndicatorSize,\n            width: customStyles.stepIndicatorSize,\n            borderRadius: customStyles.stepIndicatorSize / 2\n          };\n          indicatorLabelStyle = {\n            fontSize: customStyles.stepIndicatorLabelFontSize,\n            color: customStyles.stepIndicatorLabelFinishedColor\n          };\n          break;\n        }\n\n      case STEP_STATUS.UNFINISHED:\n        {\n          stepStyle = {\n            backgroundColor: customStyles.stepIndicatorUnFinishedColor,\n            borderWidth: customStyles.stepStrokeWidth,\n            borderColor: customStyles.stepStrokeUnFinishedColor,\n            height: customStyles.stepIndicatorSize,\n            width: customStyles.stepIndicatorSize,\n            borderRadius: customStyles.stepIndicatorSize / 2\n          };\n          indicatorLabelStyle = {\n            overflow: 'hidden',\n            fontSize: customStyles.stepIndicatorLabelFontSize,\n            color: customStyles.stepIndicatorLabelUnFinishedColor\n          };\n          break;\n        }\n\n      default:\n    }\n\n    return React.createElement(Animated.View, {\n      key: 'step-indicator',\n      style: [styles.step, stepStyle],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321\n      }\n    }, renderStepProgress ? renderStepProgress({\n      position: position,\n      stepStatus: getStepStatus(position)\n    }) : React.createElement(Text, {\n      style: indicatorLabelStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328\n      }\n    }, \"\" + (position + 1)));\n  };\n\n  getStepStatus = function getStepStatus(stepPosition) {\n    var currentPosition = props.currentPosition;\n\n    if (stepPosition === currentPosition) {\n      return STEP_STATUS.CURRENT;\n    } else if (stepPosition < currentPosition) {\n      return STEP_STATUS.FINISHED;\n    } else {\n      return STEP_STATUS.UNFINISHED;\n    }\n  };\n\n  onCurrentPositionChanged = function onCurrentPositionChanged(position) {\n    var stepCount = props.stepCount;\n\n    if (position > stepCount - 1) {\n      position = stepCount - 1;\n    }\n\n    var animateToPosition = progressBarSize / (stepCount - 1) * position;\n    sizeAnim.setValue(customStyles.stepIndicatorSize);\n    borderRadiusAnim.setValue(customStyles.stepIndicatorSize / 2);\n    Animated.sequence([Animated.timing(progressAnim, {\n      toValue: animateToPosition,\n      duration: 200\n    }), Animated.parallel([Animated.timing(sizeAnim, {\n      toValue: customStyles.currentStepIndicatorSize,\n      duration: 100\n    }), Animated.timing(borderRadiusAnim, {\n      toValue: customStyles.currentStepIndicatorSize / 2,\n      duration: 100\n    })])]).start();\n  };\n\n  return React.createElement(View, {\n    style: [styles.container, direction === 'vertical' ? {\n      flexDirection: 'row',\n      flex: 1\n    } : {\n      flexDirection: 'column'\n    }],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 375\n    }\n  }, width !== 0 && renderProgressBarBackground(), width !== 0 && renderProgressBar(), renderStepProgress(), labels && renderStepLabels());\n}\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'transparent'\n  },\n  stepIndicatorContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-around',\n    backgroundColor: 'transparent'\n  },\n  stepLabelsContainer: {\n    justifyContent: 'space-around'\n  },\n  step: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    zIndex: 2\n  },\n  stepContainer: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  stepLabel: {\n    fontSize: 12,\n    textAlign: 'center',\n    fontWeight: '500'\n  },\n  stepLabelItem: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});\nStepProgress.propTypes = {\n  currentPosition: PropTypes.number,\n  stepCount: PropTypes.number,\n  customStyles: PropTypes.object,\n  direction: PropTypes.oneOf(['vertical', 'horizontal']),\n  labels: PropTypes.array,\n  onPress: PropTypes.func,\n  renderStepProgress: PropTypes.func,\n  renderLabel: PropTypes.func\n};\nStepProgress.defaultProps = {\n  currentPosition: 0,\n  stepCount: 5,\n  customStyles: {},\n  direction: 'horizontal'\n};","map":{"version":3,"sources":["D:/react project/homiApp/homi/node_modules/react-native-step-progress/StepProgress.js"],"names":["React","useState","useEffect","PropTypes","STEP_STATUS","CURRENT","FINISHED","UNFINISHED","StepProgress","props","defaultStyles","stepIndicatorSize","currentStepIndicatorSize","separatorStrokeWidth","separatorStrokeUnfinishedWidth","separatorStrokeFinishedWidth","currentStepStrokeWidth","stepStrokeWidth","stepStrokeCurrentColor","stepStrokeFinishedColor","stepStrokeUnFinishedColor","separatorFinishedColor","separatorUnFinishedColor","stepIndicatorFinishedColor","stepIndicatorUnFinishedColor","stepIndicatorCurrentColor","stepIndicatorLabelFontSize","currentStepIndicatorLabelFontSize","stepIndicatorLabelCurrentColor","stepIndicatorLabelFinishedColor","stepIndicatorLabelUnFinishedColor","labelColor","labelSize","labelAlign","currentStepLabelColor","width","setWidth","height","setHeight","progressBarSize","setProgressBarSize","customStyles","setCustomStyles","progressAnim","Animated","Value","sizeAnim","borderRadiusAnim","stepPressed","position","onPress","labels","direction","onCurrentPositionChanged","currentPosition","renderProgressBarBackground","stepCount","progressBarBackgroundStyle","backgroundColor","left","top","bottom","right","event","nativeEvent","layout","renderProgressBar","progressBarStyle","renderStepProgress","steps","push","styles","stepContainer","flexDirection","renderStep","stepIndicatorContainer","renderStepLabels","renderLabel","labelViews","map","label","index","selectedStepLabelStyle","color","stepLabelItem","stepStatus","getStepStatus","stepLabel","fontSize","fontFamily","labelFontFamily","stepLabelsContainer","paddingHorizontal","paddingVertical","alignItems","stepStyle","indicatorLabelStyle","separatorStyle","zIndex","borderWidth","borderColor","borderRadius","overflow","step","stepPosition","animateToPosition","setValue","sequence","timing","toValue","duration","parallel","start","container","flex","StyleSheet","create","justifyContent","textAlign","fontWeight","propTypes","number","object","oneOf","array","func","defaultProps"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {\r\n  View,\r\n  Text,\r\n  StyleSheet,\r\n  Animated,\r\n  TouchableWithoutFeedback\r\n} from 'react-native'\r\n\r\nconst STEP_STATUS = {\r\n  CURRENT: 'current',\r\n  FINISHED: 'finished',\r\n  UNFINISHED: 'unfinished'\r\n}\r\n\r\nexport default function StepProgress(props) {\r\n  \r\n    const defaultStyles = {\r\n      stepIndicatorSize: 30,\r\n      currentStepIndicatorSize: 40,\r\n      separatorStrokeWidth: 3,\r\n      separatorStrokeUnfinishedWidth: 0,\r\n      separatorStrokeFinishedWidth: 0,\r\n      currentStepStrokeWidth: 5,\r\n      stepStrokeWidth: 0,\r\n      stepStrokeCurrentColor: '#4aae4f',\r\n      stepStrokeFinishedColor: '#4aae4f',\r\n      stepStrokeUnFinishedColor: '#4aae4f',\r\n      separatorFinishedColor: '#4aae4f',\r\n      separatorUnFinishedColor: '#a4d4a5',\r\n      stepIndicatorFinishedColor: '#4aae4f',\r\n      stepIndicatorUnFinishedColor: '#a4d4a5',\r\n      stepIndicatorCurrentColor: '#ffffff',\r\n      stepIndicatorLabelFontSize: 15,\r\n      currentStepIndicatorLabelFontSize: 15,\r\n      stepIndicatorLabelCurrentColor: '#000000',\r\n      stepIndicatorLabelFinishedColor: '#ffffff',\r\n      stepIndicatorLabelUnFinishedColor: 'rgba(255,255,255,0.5)',\r\n      labelColor: '#000000',\r\n      labelSize: 13,\r\n      labelAlign: 'center',\r\n      currentStepLabelColor: '#4aae4f'\r\n    }    \r\n\r\n    const [width, setWidth] = useState(0)\r\n    const [height, setHeight] = useState(0)\r\n    const [progressBarSize, setProgressBarSize] = useState(0)\r\n    const [customStyles, setCustomStyles] = useState(Object.assign(defaultStyles, props.customStyles))\r\n\r\n    const progressAnim = new Animated.Value(0)\r\n    const sizeAnim = new Animated.Value(\r\n      customStyles.stepIndicatorSize\r\n    )\r\n    const borderRadiusAnim = new Animated.Value(\r\n      customStyles.stepIndicatorSize / 2\r\n    )\r\n\r\n  function stepPressed (position) {\r\n    if (props.onPress) {\r\n      props.onPress(position)\r\n    }\r\n  }\r\n\r\n  const { labels, direction } = props\r\n  \r\n  useEffect( () => {\r\n    setCustomStyles(Object.assign(customStyles, props.customStyles));\r\n    onCurrentPositionChanged(props.currentPosition);\r\n  });  \r\n\r\n  renderProgressBarBackground = () => {\r\n    const { stepCount, direction } = props\r\n    let progressBarBackgroundStyle\r\n    if (direction === 'vertical') {\r\n      progressBarBackgroundStyle = {\r\n        backgroundColor: customStyles.separatorUnFinishedColor,\r\n        position: 'absolute',\r\n        left:\r\n          (width - customStyles.separatorStrokeWidth) / 2,\r\n        top: height / (2 * stepCount),\r\n        bottom: height / (2 * stepCount),\r\n        width:\r\n          customStyles.separatorStrokeUnfinishedWidth == 0\r\n            ? customStyles.separatorStrokeWidth\r\n            : customStyles.separatorStrokeUnfinishedWidth\r\n      }\r\n    } else {\r\n      progressBarBackgroundStyle = {\r\n        backgroundColor: customStyles.separatorUnFinishedColor,\r\n        position: 'absolute',\r\n        top:\r\n          (height - customStyles.separatorStrokeWidth) /\r\n          2,\r\n        left: width / (2 * stepCount),\r\n        right: width / (2 * stepCount),\r\n        height:\r\n          customStyles.separatorStrokeUnfinishedWidth == 0\r\n            ? customStyles.separatorStrokeWidth\r\n            : customStyles.separatorStrokeUnfinishedWidth\r\n      }\r\n    }\r\n    return (\r\n      <View\r\n        onLayout={event => {\r\n          if (direction === 'vertical') {\r\n            setProgressBarSize(event.nativeEvent.layout.height)\r\n          } else {\r\n            setProgressBarSize(event.nativeEvent.layout.width)\r\n          }\r\n        }}\r\n        style={progressBarBackgroundStyle}\r\n      />\r\n    )\r\n  }\r\n\r\n  renderProgressBar = () => {\r\n    const { stepCount, direction } = props\r\n    let progressBarStyle\r\n    if (direction === 'vertical') {\r\n      progressBarStyle = {\r\n        backgroundColor: customStyles.separatorFinishedColor,\r\n        position: 'absolute',\r\n        left:\r\n          (width - customStyles.separatorStrokeWidth) / 2,\r\n        top: height / (2 * stepCount),\r\n        bottom: height / (2 * stepCount),\r\n        width:\r\n          customStyles.separatorStrokeFinishedWidth == 0\r\n            ? customStyles.separatorStrokeWidth\r\n            : customStyles.separatorStrokeFinishedWidth,\r\n        height: progressAnim\r\n      }\r\n    } else {\r\n      progressBarStyle = {\r\n        backgroundColor: customStyles.separatorFinishedColor,\r\n        position: 'absolute',\r\n        top:\r\n          (height - customStyles.separatorStrokeWidth) /\r\n          2,\r\n        left: width / (2 * stepCount),\r\n        right: width / (2 * stepCount),\r\n        height:\r\n          customStyles.separatorStrokeFinishedWidth == 0\r\n            ? customStyles.separatorStrokeWidth\r\n            : customStyles.separatorStrokeFinishedWidth,\r\n        width: progressAnim\r\n      }\r\n    }\r\n    return <Animated.View style={progressBarStyle} />\r\n  }\r\n\r\n  renderStepProgress = () => {\r\n    let steps = []\r\n    const { labels, stepCount, direction } = props\r\n    for (let position = 0; position < stepCount; position++) {\r\n      steps.push(\r\n        <TouchableWithoutFeedback\r\n          key={position}\r\n          onPress={() => stepPressed(position)}\r\n        >\r\n          <View\r\n            style={[\r\n              styles.stepContainer,\r\n              direction === 'vertical'\r\n                ? { flexDirection: 'column' }\r\n                : { flexDirection: 'row' }\r\n            ]}\r\n          >\r\n            {renderStep(position)}\r\n          </View>\r\n        </TouchableWithoutFeedback>\r\n      )\r\n    }\r\n    return (\r\n      <View\r\n        onLayout={event => {\r\n            setWidth(event.nativeEvent.layout.width)\r\n            setHeight(event.nativeEvent.layout.height)\r\n          }\r\n        }\r\n        style={[\r\n          styles.stepIndicatorContainer,\r\n          direction === 'vertical'\r\n            ? {\r\n              flexDirection: 'column',\r\n              width: customStyles.currentStepIndicatorSize\r\n            }\r\n            : {\r\n              flexDirection: 'row',\r\n              height: customStyles.currentStepIndicatorSize\r\n            }\r\n        ]}\r\n      >\r\n        {steps}\r\n      </View>\r\n    )\r\n  }\r\n\r\n  renderStepLabels = () => {\r\n    const { labels, direction, currentPosition, renderLabel } = props\r\n    var labelViews = labels.map((label, index) => {\r\n      const selectedStepLabelStyle =\r\n        index === currentPosition\r\n          ? { color: customStyles.currentStepLabelColor }\r\n          : { color: customStyles.labelColor }\r\n      return (\r\n        <TouchableWithoutFeedback\r\n          style={styles.stepLabelItem}\r\n          key={index}\r\n          onPress={() => stepPressed(index)}\r\n        >\r\n          <View style={styles.stepLabelItem}>\r\n            {renderLabel ? (\r\n              renderLabel({\r\n                position: index,\r\n                stepStatus: getStepStatus(index),\r\n                label,\r\n                currentPosition\r\n              })\r\n            ) : (\r\n              <Text\r\n                style={[\r\n                  styles.stepLabel,\r\n                  selectedStepLabelStyle,\r\n                  {\r\n                    fontSize: customStyles.labelSize,\r\n                    fontFamily: customStyles.labelFontFamily\r\n                  }\r\n                ]}\r\n              >\r\n                {label}\r\n              </Text>\r\n            )}\r\n          </View>\r\n        </TouchableWithoutFeedback>\r\n      )\r\n    })\r\n\r\n    return (\r\n      <View\r\n        style={[\r\n          styles.stepLabelsContainer,\r\n          direction === 'vertical'\r\n            ? { flexDirection: 'column', paddingHorizontal: 4 }\r\n            : { flexDirection: 'row', paddingVertical: 4 },\r\n          { alignItems: customStyles.labelAlign }\r\n        ]}\r\n      >\r\n        {labelViews}\r\n      </View>\r\n    )\r\n  }\r\n\r\n  renderStep = position => {\r\n    const {\r\n      currentPosition,\r\n      stepCount,\r\n      direction,\r\n      renderStepProgress\r\n    } = props\r\n    let stepStyle\r\n    let indicatorLabelStyle\r\n    const separatorStyle =\r\n      direction === 'vertical'\r\n        ? { width: customStyles.separatorStrokeWidth, zIndex: 10 }\r\n        : { height: customStyles.separatorStrokeWidth }\r\n    switch (getStepStatus(position)) {\r\n      case STEP_STATUS.CURRENT: {\r\n        stepStyle = {\r\n          backgroundColor: customStyles.stepIndicatorCurrentColor,\r\n          borderWidth: customStyles.currentStepStrokeWidth,\r\n          borderColor: customStyles.stepStrokeCurrentColor,\r\n          height: sizeAnim,\r\n          width: sizeAnim,\r\n          borderRadius: borderRadiusAnim\r\n        }\r\n        indicatorLabelStyle = {\r\n          fontSize: customStyles.currentStepIndicatorLabelFontSize,\r\n          color: customStyles.stepIndicatorLabelCurrentColor\r\n        }\r\n\r\n        break\r\n      }\r\n      case STEP_STATUS.FINISHED: {\r\n        stepStyle = {\r\n          backgroundColor: customStyles.stepIndicatorFinishedColor,\r\n          borderWidth: customStyles.stepStrokeWidth,\r\n          borderColor: customStyles.stepStrokeFinishedColor,\r\n          height: customStyles.stepIndicatorSize,\r\n          width: customStyles.stepIndicatorSize,\r\n          borderRadius: customStyles.stepIndicatorSize / 2\r\n        }\r\n        indicatorLabelStyle = {\r\n          fontSize: customStyles.stepIndicatorLabelFontSize,\r\n          color: customStyles.stepIndicatorLabelFinishedColor\r\n        }\r\n        break\r\n      }\r\n\r\n      case STEP_STATUS.UNFINISHED: {\r\n        stepStyle = {\r\n          backgroundColor: customStyles.stepIndicatorUnFinishedColor,\r\n          borderWidth: customStyles.stepStrokeWidth,\r\n          borderColor: customStyles.stepStrokeUnFinishedColor,\r\n          height: customStyles.stepIndicatorSize,\r\n          width: customStyles.stepIndicatorSize,\r\n          borderRadius: customStyles.stepIndicatorSize / 2\r\n        }\r\n        indicatorLabelStyle = {\r\n          overflow: 'hidden',\r\n          fontSize: customStyles.stepIndicatorLabelFontSize,\r\n          color: customStyles.stepIndicatorLabelUnFinishedColor\r\n        }\r\n        break\r\n      }\r\n      default:\r\n    }\r\n\r\n    return (\r\n      <Animated.View key={'step-indicator'} style={[styles.step, stepStyle]}>\r\n        {renderStepProgress ? (\r\n          renderStepProgress({\r\n            position,\r\n            stepStatus: getStepStatus(position)\r\n          })\r\n        ) : (\r\n          <Text style={indicatorLabelStyle}>{`${position + 1}`}</Text>\r\n        )}\r\n      </Animated.View>\r\n    )\r\n  }\r\n\r\n  getStepStatus = stepPosition => {\r\n    const { currentPosition } = props\r\n    if (stepPosition === currentPosition) {\r\n      return STEP_STATUS.CURRENT\r\n    } else if (stepPosition < currentPosition) {\r\n      return STEP_STATUS.FINISHED\r\n    } else {\r\n      return STEP_STATUS.UNFINISHED\r\n    }\r\n  }\r\n\r\n  onCurrentPositionChanged = position => {\r\n    let { stepCount } = props\r\n    if (position > stepCount - 1) {\r\n      position = stepCount - 1\r\n    }\r\n    const animateToPosition =\r\n      (progressBarSize / (stepCount - 1)) * position\r\n    sizeAnim.setValue(customStyles.stepIndicatorSize)\r\n    borderRadiusAnim.setValue(\r\n      customStyles.stepIndicatorSize / 2\r\n    )\r\n    Animated.sequence([\r\n      Animated.timing(progressAnim, {\r\n        toValue: animateToPosition,\r\n        duration: 200\r\n      }),\r\n      Animated.parallel([\r\n        Animated.timing(sizeAnim, {\r\n          toValue: customStyles.currentStepIndicatorSize,\r\n          duration: 100\r\n        }),\r\n        Animated.timing(borderRadiusAnim, {\r\n          toValue: customStyles.currentStepIndicatorSize / 2,\r\n          duration: 100\r\n        })\r\n      ])\r\n    ]).start()\r\n  }\r\n\r\n  return (\r\n    <View\r\n      style={[\r\n        styles.container,\r\n        direction === 'vertical'\r\n          ? { flexDirection: 'row', flex: 1 }\r\n          : { flexDirection: 'column' }\r\n      ]}\r\n    >\r\n      {width !== 0 && renderProgressBarBackground()}\r\n      {width !== 0 && renderProgressBar()}\r\n      {renderStepProgress()}\r\n      {labels && renderStepLabels()}\r\n    </View>\r\n  )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    backgroundColor: 'transparent'\r\n  },\r\n  stepIndicatorContainer: {\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    justifyContent: 'space-around',\r\n    backgroundColor: 'transparent'\r\n  },\r\n  stepLabelsContainer: {\r\n    justifyContent: 'space-around'\r\n  },\r\n  step: {\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    zIndex: 2\r\n  },\r\n  stepContainer: {\r\n    flex: 1,\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    justifyContent: 'center'\r\n  },\r\n  stepLabel: {\r\n    fontSize: 12,\r\n    textAlign: 'center',\r\n    fontWeight: '500'\r\n  },\r\n  stepLabelItem: {\r\n    flex: 1,\r\n    alignItems: 'center',\r\n    justifyContent: 'center'\r\n  }\r\n})\r\n\r\nStepProgress.propTypes = {\r\n  currentPosition: PropTypes.number,\r\n  stepCount: PropTypes.number,\r\n  customStyles: PropTypes.object,\r\n  direction: PropTypes.oneOf(['vertical', 'horizontal']),\r\n  labels: PropTypes.array,\r\n  onPress: PropTypes.func,\r\n  renderStepProgress: PropTypes.func,\r\n  renderLabel: PropTypes.func\r\n}\r\n\r\nStepProgress.defaultProps = {\r\n  currentPosition: 0,\r\n  stepCount: 5,\r\n  customStyles: {},\r\n  direction: 'horizontal'\r\n}\r\n"]},"metadata":{},"sourceType":"module"}