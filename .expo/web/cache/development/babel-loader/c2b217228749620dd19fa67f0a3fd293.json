{"ast":null,"code":"var _jsxFileName = \"D:\\\\react project\\\\homiApp\\\\homi\\\\node_modules\\\\react-native-calendar-picker\\\\CalendarPicker\\\\DaysGridView.js\";\nimport React from 'react';\nimport uuid from 'uuid/v4';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport RNViewPropTypes from \"react-native-web/dist/exports/ViewPropTypes\";\nimport PropTypes from 'prop-types';\nimport Day from \"./Day\";\nimport EmptyDay from \"./EmptyDay\";\nimport { Utils } from \"./Utils\";\nimport moment from 'moment';\nvar ViewPropTypes = RNViewPropTypes || View.propTypes;\nexport default function DaysGridView(props) {\n  var month = props.month,\n      year = props.year,\n      styles = props.styles,\n      onPressDay = props.onPressDay,\n      startFromMonday = props.startFromMonday,\n      selectedStartDate = props.selectedStartDate,\n      selectedEndDate = props.selectedEndDate,\n      allowRangeSelection = props.allowRangeSelection,\n      textStyle = props.textStyle,\n      todayTextStyle = props.todayTextStyle,\n      selectedDayStyle = props.selectedDayStyle,\n      selectedRangeStartStyle = props.selectedRangeStartStyle,\n      selectedRangeStyle = props.selectedRangeStyle,\n      selectedRangeEndStyle = props.selectedRangeEndStyle,\n      customDatesStyles = props.customDatesStyles,\n      minDate = props.minDate,\n      maxDate = props.maxDate,\n      disabledDates = props.disabledDates,\n      disabledDatesTextStyle = props.disabledDatesTextStyle,\n      minRangeDuration = props.minRangeDuration,\n      maxRangeDuration = props.maxRangeDuration,\n      enableDateChange = props.enableDateChange;\n  var today = moment();\n  var totalDays = Utils.getDaysInMonth(month, year);\n  var firstDayOfMonth = moment({\n    year: year,\n    month: month,\n    day: 1\n  });\n  var firstWeekDay = firstDayOfMonth.isoWeekday();\n  var days = Array.apply(null, {\n    length: totalDays\n  }).map(Number.call, Number);\n  var dayArray = [0, 1, 2, 3, 4, 5, 6];\n  var weekArray = [0, 1, 2, 3, 4, 5];\n  var startIndex = (startFromMonday ? firstWeekDay - 1 : firstWeekDay) % 7;\n\n  function generateDatesForWeek(i) {\n    return dayArray.map(function (dayIndex) {\n      if (i === 0) {\n        if (dayIndex >= startIndex) {\n          if (days.length > 0) {\n            var day = days.shift() + 1;\n            return React.createElement(Day, {\n              key: day,\n              day: day,\n              month: month,\n              year: year,\n              styles: styles,\n              onPressDay: onPressDay,\n              selectedStartDate: selectedStartDate,\n              selectedEndDate: selectedEndDate,\n              allowRangeSelection: allowRangeSelection,\n              minDate: minDate,\n              maxDate: maxDate,\n              disabledDates: disabledDates,\n              disabledDatesTextStyle: disabledDatesTextStyle,\n              minRangeDuration: minRangeDuration,\n              maxRangeDuration: maxRangeDuration,\n              textStyle: textStyle,\n              todayTextStyle: todayTextStyle,\n              selectedDayStyle: selectedDayStyle,\n              selectedRangeStartStyle: selectedRangeStartStyle,\n              selectedRangeStyle: selectedRangeStyle,\n              selectedRangeEndStyle: selectedRangeEndStyle,\n              customDatesStyles: customDatesStyles,\n              enableDateChange: enableDateChange,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 75\n              }\n            });\n          }\n        } else {\n          return React.createElement(EmptyDay, {\n            key: uuid(),\n            styles: styles,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 104\n            }\n          });\n        }\n      } else {\n        if (days.length > 0) {\n          var _day = days.shift() + 1;\n\n          return React.createElement(Day, {\n            key: _day,\n            day: _day,\n            month: month,\n            year: year,\n            styles: styles,\n            onPressDay: onPressDay,\n            selectedStartDate: selectedStartDate,\n            selectedEndDate: selectedEndDate,\n            allowRangeSelection: allowRangeSelection,\n            minDate: minDate,\n            maxDate: maxDate,\n            disabledDates: disabledDates,\n            disabledDatesTextStyle: disabledDatesTextStyle,\n            minRangeDuration: minRangeDuration,\n            maxRangeDuration: maxRangeDuration,\n            textStyle: textStyle,\n            todayTextStyle: todayTextStyle,\n            selectedDayStyle: selectedDayStyle,\n            selectedRangeStartStyle: selectedRangeStartStyle,\n            selectedRangeStyle: selectedRangeStyle,\n            selectedRangeEndStyle: selectedRangeEndStyle,\n            customDatesStyles: customDatesStyles,\n            enableDateChange: enableDateChange,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 114\n            }\n          });\n        }\n      }\n    });\n  }\n\n  return React.createElement(View, {\n    style: styles.daysWrapper,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    }\n  }, weekArray.map(function (weekIndexOfMonth) {\n    return React.createElement(View, {\n      key: weekIndexOfMonth,\n      style: styles.weekRow,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      }\n    }, generateDatesForWeek(weekIndexOfMonth));\n  }));\n}\nDaysGridView.propTypes = {\n  styles: PropTypes.shape(),\n  month: PropTypes.number.isRequired,\n  year: PropTypes.number.isRequired,\n  onPressDay: PropTypes.func,\n  startFromMonday: PropTypes.bool,\n  selectedDayStyle: ViewPropTypes.style,\n  selectedRangeStartStyle: ViewPropTypes.style,\n  selectedRangeStyle: ViewPropTypes.style,\n  selectedRangeEndStyle: ViewPropTypes.style,\n  todayTextStyle: Text.propTypes.style,\n  customDatesStyles: PropTypes.arrayOf(PropTypes.shape({\n    date: PropTypes.oneOfType([PropTypes.string, PropTypes.instanceOf(Date), PropTypes.instanceOf(moment)]),\n    containerStyle: ViewPropTypes.style,\n    style: ViewPropTypes.style,\n    textStyle: Text.propTypes.style\n  })),\n  disabledDates: PropTypes.oneOfType([PropTypes.array, PropTypes.func]),\n  disabledDatesTextStyle: Text.propTypes.style,\n  minRangeDuration: PropTypes.oneOfType([PropTypes.array, PropTypes.number]),\n  maxRangeDuration: PropTypes.oneOfType([PropTypes.array, PropTypes.number])\n};","map":{"version":3,"sources":["D:/react project/homiApp/homi/node_modules/react-native-calendar-picker/CalendarPicker/DaysGridView.js"],"names":["React","uuid","PropTypes","Day","EmptyDay","Utils","moment","ViewPropTypes","RNViewPropTypes","View","propTypes","DaysGridView","props","month","year","styles","onPressDay","startFromMonday","selectedStartDate","selectedEndDate","allowRangeSelection","textStyle","todayTextStyle","selectedDayStyle","selectedRangeStartStyle","selectedRangeStyle","selectedRangeEndStyle","customDatesStyles","minDate","maxDate","disabledDates","disabledDatesTextStyle","minRangeDuration","maxRangeDuration","enableDateChange","today","totalDays","getDaysInMonth","firstDayOfMonth","day","firstWeekDay","isoWeekday","days","Array","apply","length","map","Number","call","dayArray","weekArray","startIndex","generateDatesForWeek","i","dayIndex","shift","daysWrapper","weekIndexOfMonth","weekRow","shape","number","isRequired","func","bool","style","Text","arrayOf","date","oneOfType","string","instanceOf","Date","containerStyle","array"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport uuid from 'uuid/v4';\r\nimport {\r\n  View,\r\n  Text,\r\n  ViewPropTypes as RNViewPropTypes,\r\n} from 'react-native';\r\nimport PropTypes from 'prop-types';\r\nimport Day from './Day';\r\nimport EmptyDay from './EmptyDay';\r\nimport { Utils } from './Utils';\r\nimport moment from 'moment';\r\n\r\nconst ViewPropTypes = RNViewPropTypes || View.propTypes;\r\n\r\nexport default function DaysGridView(props) {\r\n  const {\r\n    month,\r\n    year,\r\n    styles,\r\n    onPressDay,\r\n    startFromMonday,\r\n    selectedStartDate,\r\n    selectedEndDate,\r\n    allowRangeSelection,\r\n    textStyle,\r\n    todayTextStyle,\r\n    selectedDayStyle,\r\n    selectedRangeStartStyle,\r\n    selectedRangeStyle,\r\n    selectedRangeEndStyle,\r\n    customDatesStyles,\r\n    minDate,\r\n    maxDate,\r\n    disabledDates,\r\n    disabledDatesTextStyle,\r\n    minRangeDuration,\r\n    maxRangeDuration,\r\n    enableDateChange\r\n  } = props;\r\n\r\n  const today = moment();\r\n\r\n  // let's get the total of days in this month, we need the year as well, since\r\n  // leap years have different amount of days in February\r\n  const totalDays = Utils.getDaysInMonth(month, year);\r\n\r\n  // Let's create a date for day one of the current given month and year\r\n  const firstDayOfMonth = moment({ year, month, day: 1 });\r\n\r\n  // isoWeekday() gets the ISO day of the week with 1 being Monday and 7 being Sunday.\r\n  // We will need this to know what day of the week to show day 1\r\n  // See https://github.com/stephy/CalendarPicker/issues/49\r\n  const firstWeekDay = firstDayOfMonth.isoWeekday();\r\n\r\n  // fill up an array of days with the amount of days in the current month\r\n  const days = Array.apply(null, {length: totalDays}).map(Number.call, Number);\r\n\r\n  // 7 days in a week.\r\n  const dayArray = [ 0, 1, 2, 3, 4, 5, 6 ];\r\n\r\n  // There can be 4 to 6 rows of weeks in a month.\r\n  const weekArray = [ 0, 1, 2, 3, 4, 5 ];\r\n\r\n  // Get the starting index, based upon whether we are using monday or sunday as first day.\r\n  const startIndex = (startFromMonday ? firstWeekDay - 1 : firstWeekDay) % 7;\r\n\r\n  function generateDatesForWeek(i) {\r\n    return dayArray.map(dayIndex => {\r\n      if (i === 0) { // for first row, let's start showing the days on the correct weekday\r\n        if (dayIndex >= startIndex) {\r\n          if (days.length > 0) {\r\n            const day = days.shift() + 1;\r\n            return (\r\n              <Day\r\n                key={day}\r\n                day={day}\r\n                month={month}\r\n                year={year}\r\n                styles={styles}\r\n                onPressDay={onPressDay}\r\n                selectedStartDate={selectedStartDate}\r\n                selectedEndDate={selectedEndDate}\r\n                allowRangeSelection={allowRangeSelection}\r\n                minDate={minDate}\r\n                maxDate={maxDate}\r\n                disabledDates={disabledDates}\r\n                disabledDatesTextStyle={disabledDatesTextStyle}\r\n                minRangeDuration={minRangeDuration}\r\n                maxRangeDuration={maxRangeDuration}\r\n                textStyle={textStyle}\r\n                todayTextStyle={todayTextStyle}\r\n                selectedDayStyle={selectedDayStyle}\r\n                selectedRangeStartStyle={selectedRangeStartStyle}\r\n                selectedRangeStyle={selectedRangeStyle}\r\n                selectedRangeEndStyle={selectedRangeEndStyle}\r\n                customDatesStyles={customDatesStyles}\r\n                enableDateChange={enableDateChange}\r\n              />\r\n            );\r\n          }\r\n        } else {\r\n          return (\r\n            <EmptyDay\r\n              key={uuid()}\r\n              styles={styles}\r\n            />\r\n          );\r\n        }\r\n      } else {\r\n        if (days.length > 0) {\r\n          const day = days.shift() + 1;\r\n          return (\r\n            <Day\r\n              key={day}\r\n              day={day}\r\n              month={month}\r\n              year={year}\r\n              styles={styles}\r\n              onPressDay={onPressDay}\r\n              selectedStartDate={selectedStartDate}\r\n              selectedEndDate={selectedEndDate}\r\n              allowRangeSelection={allowRangeSelection}\r\n              minDate={minDate}\r\n              maxDate={maxDate}\r\n              disabledDates={disabledDates}\r\n              disabledDatesTextStyle={disabledDatesTextStyle}\r\n              minRangeDuration={minRangeDuration}\r\n              maxRangeDuration={maxRangeDuration}\r\n              textStyle={textStyle}\r\n              todayTextStyle={todayTextStyle}\r\n              selectedDayStyle={selectedDayStyle}\r\n              selectedRangeStartStyle={selectedRangeStartStyle}\r\n              selectedRangeStyle={selectedRangeStyle}\r\n              selectedRangeEndStyle={selectedRangeEndStyle}\r\n              customDatesStyles={customDatesStyles}\r\n              enableDateChange={enableDateChange}\r\n            />\r\n          );\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  return (\r\n    <View style={styles.daysWrapper}>\r\n      { weekArray.map(weekIndexOfMonth => (\r\n          <View key={weekIndexOfMonth} style={styles.weekRow}>\r\n            { generateDatesForWeek(weekIndexOfMonth) }\r\n          </View>\r\n        ))\r\n      }\r\n    </View>\r\n  );\r\n}\r\n\r\nDaysGridView.propTypes = {\r\n  styles: PropTypes.shape(),\r\n  month: PropTypes.number.isRequired,\r\n  year: PropTypes.number.isRequired,\r\n  onPressDay: PropTypes.func,\r\n  startFromMonday: PropTypes.bool,\r\n  selectedDayStyle: ViewPropTypes.style,\r\n  selectedRangeStartStyle: ViewPropTypes.style,\r\n  selectedRangeStyle: ViewPropTypes.style,\r\n  selectedRangeEndStyle: ViewPropTypes.style,\r\n  todayTextStyle: Text.propTypes.style,\r\n  customDatesStyles: PropTypes.arrayOf(PropTypes.shape({\r\n    date: PropTypes.oneOfType([\r\n      PropTypes.string,\r\n      PropTypes.instanceOf(Date),\r\n      PropTypes.instanceOf(moment)\r\n    ]),\r\n    containerStyle: ViewPropTypes.style,\r\n    style: ViewPropTypes.style,\r\n    textStyle: Text.propTypes.style,\r\n  })),\r\n  disabledDates: PropTypes.oneOfType([PropTypes.array, PropTypes.func]),\r\n  disabledDatesTextStyle: Text.propTypes.style,\r\n  minRangeDuration: PropTypes.oneOfType([PropTypes.array, PropTypes.number]),\r\n  maxRangeDuration: PropTypes.oneOfType([PropTypes.array, PropTypes.number]),\r\n}\r\n"]},"metadata":{},"sourceType":"module"}