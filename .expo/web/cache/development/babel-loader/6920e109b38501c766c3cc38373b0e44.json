{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"D:\\\\react project\\\\homiApp\\\\homi\\\\node_modules\\\\react-native-plaid-link\\\\index.js\";\nimport React, { Component } from 'react';\nimport { WebView } from 'react-native-webview';\nimport { PropTypes } from 'prop-types';\nimport omit from 'object.omit';\nvar injectedJavaScript = \"(function() {\\n  window.postMessage = function(data) {\\n    window.ReactNativeWebView.postMessage(data);\\n  };\\n})()\";\n\nvar PlaidAuthenticator = function (_Component) {\n  _inherits(PlaidAuthenticator, _Component);\n\n  function PlaidAuthenticator() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, PlaidAuthenticator);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(PlaidAuthenticator)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.onMessage = function (e) {\n      _this.props.onMessage(JSON.parse(e.nativeEvent.data));\n    };\n\n    return _this;\n  }\n\n  _createClass(PlaidAuthenticator, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          clientName = _this$props.clientName,\n          countryCodes = _this$props.countryCodes,\n          env = _this$props.env,\n          plaidRef = _this$props.plaidRef,\n          product = _this$props.product,\n          publicKey = _this$props.publicKey,\n          selectAccount = _this$props.selectAccount,\n          style = _this$props.style,\n          token = _this$props.token,\n          userEmail = _this$props.userEmail,\n          userLegalName = _this$props.userLegalName,\n          webhook = _this$props.webhook;\n      var uri = \"https://cdn.plaid.com/link/v2/stable/link.html?key=\" + publicKey + \"&apiVersion=v2&env=\" + env + \"&product=\" + product + \"&clientName=\" + clientName + \"&isWebView=true&isMobile=true&selectAccount=\" + selectAccount;\n      uri = countryCodes !== undefined ? uri + \"&countryCodes=\" + countryCodes : uri;\n      uri = token !== undefined ? uri + \"&token=\" + token : uri;\n      uri = userEmail !== undefined ? uri + \"&userEmail=\" + userEmail : uri;\n      uri = userLegalName !== undefined ? uri + \"&userLegalName=\" + userLegalName : uri;\n      uri = webhook !== undefined ? uri + \"&webhook=\" + webhook : uri;\n      return React.createElement(WebView, _extends({}, omit(this.props, ['clientName', 'countryCodes', 'env', 'product', 'publicKey', 'ref', 'selectAccount', 'token', 'userEmail', 'userLegalName', 'webhook']), {\n        ref: plaidRef,\n        source: {\n          uri: uri\n        },\n        onMessage: this.onMessage,\n        useWebKit: true,\n        injectedJavaScript: injectedJavaScript,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        }\n      }));\n    }\n  }]);\n\n  return PlaidAuthenticator;\n}(Component);\n\nPlaidAuthenticator.propTypes = {\n  clientName: PropTypes.string,\n  countryCodes: PropTypes.string,\n  env: PropTypes.string.isRequired,\n  onMessage: PropTypes.func.isRequired,\n  plaidRef: PropTypes.func,\n  product: PropTypes.string.isRequired,\n  publicKey: PropTypes.string.isRequired,\n  userEmail: PropTypes.string,\n  userLegalName: PropTypes.string,\n  webhook: PropTypes.string\n};\nPlaidAuthenticator.defaultProps = {\n  clientName: '',\n  plaidRef: function plaidRef() {}\n};\nexport default PlaidAuthenticator;","map":{"version":3,"sources":["D:/react project/homiApp/homi/node_modules/react-native-plaid-link/index.js"],"names":["React","Component","WebView","PropTypes","omit","injectedJavaScript","PlaidAuthenticator","onMessage","e","props","JSON","parse","nativeEvent","data","clientName","countryCodes","env","plaidRef","product","publicKey","selectAccount","style","token","userEmail","userLegalName","webhook","uri","undefined","propTypes","string","isRequired","func","defaultProps"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,sBAAxB;AACA,SAASC,SAAT,QAA0B,YAA1B;AACA,OAAOC,IAAP,MAAiB,aAAjB;AAEA,IAAMC,kBAAkB,yHAAxB;;IAMMC,kB;;;;;;;;;;;;;;;;UAsDJC,S,GAAY,UAAAC,CAAC,EAAI;AAoBf,YAAKC,KAAL,CAAWF,SAAX,CAAqBG,IAAI,CAACC,KAAL,CAAWH,CAAC,CAACI,WAAF,CAAcC,IAAzB,CAArB;AACD,K;;;;;;;6BA1EQ;AAAA,wBAcH,KAAKJ,KAdF;AAAA,UAELK,UAFK,eAELA,UAFK;AAAA,UAGLC,YAHK,eAGLA,YAHK;AAAA,UAILC,GAJK,eAILA,GAJK;AAAA,UAKLC,QALK,eAKLA,QALK;AAAA,UAMLC,OANK,eAMLA,OANK;AAAA,UAOLC,SAPK,eAOLA,SAPK;AAAA,UAQLC,aARK,eAQLA,aARK;AAAA,UASLC,KATK,eASLA,KATK;AAAA,UAULC,KAVK,eAULA,KAVK;AAAA,UAWLC,SAXK,eAWLA,SAXK;AAAA,UAYLC,aAZK,eAYLA,aAZK;AAAA,UAaLC,OAbK,eAaLA,OAbK;AAgBP,UAAIC,GAAG,2DACLP,SADK,2BAEeH,GAFf,iBAE8BE,OAF9B,oBAGLJ,UAHK,oDAKLM,aALF;AAOAM,MAAAA,GAAG,GAAGX,YAAY,KAAKY,SAAjB,GAAgCD,GAAhC,sBAAoDX,YAApD,GAAqEW,GAA3E;AACAA,MAAAA,GAAG,GAAGJ,KAAK,KAAKK,SAAV,GAAyBD,GAAzB,eAAsCJ,KAAtC,GAAgDI,GAAtD;AACAA,MAAAA,GAAG,GAAGH,SAAS,KAAKI,SAAd,GAA6BD,GAA7B,mBAA8CH,SAA9C,GAA4DG,GAAlE;AACAA,MAAAA,GAAG,GAAGF,aAAa,KAAKG,SAAlB,GAAiCD,GAAjC,uBAAsDF,aAAtD,GAAwEE,GAA9E;AACAA,MAAAA,GAAG,GAAGD,OAAO,KAAKE,SAAZ,GAA2BD,GAA3B,iBAA0CD,OAA1C,GAAsDC,GAA5D;AAEA,aACE,oBAAC,OAAD,eACMtB,IAAI,CAAC,KAAKK,KAAN,EAAa,CACnB,YADmB,EAEnB,cAFmB,EAGnB,KAHmB,EAInB,SAJmB,EAKnB,WALmB,EAMnB,KANmB,EAOnB,eAPmB,EAQnB,OARmB,EASnB,WATmB,EAUnB,eAVmB,EAWnB,SAXmB,CAAb,CADV;AAcE,QAAA,GAAG,EAAEQ,QAdP;AAeE,QAAA,MAAM,EAAE;AAAES,UAAAA,GAAG,EAAHA;AAAF,SAfV;AAgBE,QAAA,SAAS,EAAE,KAAKnB,SAhBlB;AAiBE,QAAA,SAAS,MAjBX;AAkBE,QAAA,kBAAkB,EAAEF,kBAlBtB;AAAA;AAAA;AAAA;AAAA;AAAA,SADF;AAsBD;;;;EApD8BJ,S;;AA8EjCK,kBAAkB,CAACsB,SAAnB,GAA+B;AAC7Bd,EAAAA,UAAU,EAAEX,SAAS,CAAC0B,MADO;AAE7Bd,EAAAA,YAAY,EAAEZ,SAAS,CAAC0B,MAFK;AAG7Bb,EAAAA,GAAG,EAAEb,SAAS,CAAC0B,MAAV,CAAiBC,UAHO;AAI7BvB,EAAAA,SAAS,EAAEJ,SAAS,CAAC4B,IAAV,CAAeD,UAJG;AAK7Bb,EAAAA,QAAQ,EAAEd,SAAS,CAAC4B,IALS;AAM7Bb,EAAAA,OAAO,EAAEf,SAAS,CAAC0B,MAAV,CAAiBC,UANG;AAO7BX,EAAAA,SAAS,EAAEhB,SAAS,CAAC0B,MAAV,CAAiBC,UAPC;AAQ7BP,EAAAA,SAAS,EAAEpB,SAAS,CAAC0B,MARQ;AAS7BL,EAAAA,aAAa,EAAErB,SAAS,CAAC0B,MATI;AAU7BJ,EAAAA,OAAO,EAAEtB,SAAS,CAAC0B;AAVU,CAA/B;AAaAvB,kBAAkB,CAAC0B,YAAnB,GAAkC;AAChClB,EAAAA,UAAU,EAAE,EADoB;AAEhCG,EAAAA,QAAQ,EAAE,oBAAM,CAAE;AAFc,CAAlC;AAKA,eAAeX,kBAAf","sourcesContent":["import React, { Component } from 'react';\nimport { WebView } from 'react-native-webview';\nimport { PropTypes } from 'prop-types';\nimport omit from 'object.omit';\n\nconst injectedJavaScript = `(function() {\n  window.postMessage = function(data) {\n    window.ReactNativeWebView.postMessage(data);\n  };\n})()`;\n\nclass PlaidAuthenticator extends Component {\n  render() {\n    const {\n      clientName,\n      countryCodes,\n      env,\n      plaidRef,\n      product,\n      publicKey,\n      selectAccount,\n      style,\n      token,\n      userEmail,\n      userLegalName,\n      webhook\n    } = this.props;\n\n    let uri = `https://cdn.plaid.com/link/v2/stable/link.html?key=${\n      publicKey\n    }&apiVersion=v2&env=${env}&product=${product}&clientName=${\n      clientName\n    }&isWebView=true&isMobile=true&selectAccount=${\n      selectAccount\n    }`;\n    uri = countryCodes !== undefined ? `${uri}&countryCodes=${countryCodes}` : uri;\n    uri = token !== undefined ? `${uri}&token=${token}` : uri;\n    uri = userEmail !== undefined ? `${uri}&userEmail=${userEmail}` : uri;\n    uri = userLegalName !== undefined ? `${uri}&userLegalName=${userLegalName}` : uri;\n    uri = webhook !== undefined ? `${uri}&webhook=${webhook}` : uri;\n\n    return (\n      <WebView\n        {...omit(this.props, [\n          'clientName',\n          'countryCodes',\n          'env',\n          'product',\n          'publicKey',\n          'ref',\n          'selectAccount',\n          'token',\n          'userEmail',\n          'userLegalName',\n          'webhook'\n        ])}\n        ref={plaidRef}\n        source={{ uri }}\n        onMessage={this.onMessage}\n        useWebKit\n        injectedJavaScript={injectedJavaScript}\n      />\n    );\n  }\n\n  onMessage = e => {\n    /*\n      Response example for success\n      {\n        \"action\": \"plaid_link-undefined::connected\",\n        \"metadata\": {\n          \"account\": {\n            \"id\": null,\n            \"name\": null\n          },\n          \"account_id\": null,\n          \"public_token\": \"public-sandbox-e697e666-9ac2-4538-b152-7e56a4e59365\",\n          \"institution\": {\n            \"name\": \"Chase\",\n            \"institution_id\": \"ins_3\"\n          }\n        }\n      }\n    */\n\n    this.props.onMessage(JSON.parse(e.nativeEvent.data));\n  };\n}\n\nPlaidAuthenticator.propTypes = {\n  clientName: PropTypes.string,\n  countryCodes: PropTypes.string,\n  env: PropTypes.string.isRequired,\n  onMessage: PropTypes.func.isRequired,\n  plaidRef: PropTypes.func,\n  product: PropTypes.string.isRequired,\n  publicKey: PropTypes.string.isRequired,\n  userEmail: PropTypes.string,\n  userLegalName: PropTypes.string,\n  webhook: PropTypes.string\n};\n\nPlaidAuthenticator.defaultProps = {\n  clientName: '',\n  plaidRef: () => {}\n};\n\nexport default PlaidAuthenticator;\n"]},"metadata":{},"sourceType":"module"}